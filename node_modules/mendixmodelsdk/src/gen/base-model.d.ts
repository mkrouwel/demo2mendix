import { IAbstractModel, AbstractModel } from "../sdk/internal/AbstractModel";
import { appservices } from "./appservices";
import { businessevents } from "./businessevents";
import { codeactions } from "./codeactions";
import { constants } from "./constants";
import { customicons } from "./customicons";
import { customwidgets } from "./customwidgets";
import { datasets } from "./datasets";
import { datatypes } from "./datatypes";
import { documenttemplates } from "./documenttemplates";
import { domainmodels } from "./domainmodels";
import { enumerations } from "./enumerations";
import { exportmappings } from "./exportmappings";
import { expressions } from "./expressions";
import { images } from "./images";
import { importmappings } from "./importmappings";
import { javaactions } from "./javaactions";
import { javascriptactions } from "./javascriptactions";
import { jsonstructures } from "./jsonstructures";
import { kafka } from "./kafka";
import { mlmappings } from "./mlmappings";
import { mappings } from "./mappings";
import { menus } from "./menus";
import { messagedefinitions } from "./messagedefinitions";
import { microflows } from "./microflows";
import { nanoflows } from "./nanoflows";
import { nativepages } from "./nativepages";
import { navigation } from "./navigation";
import { pages } from "./pages";
import { projects } from "./projects";
import { queues } from "./queues";
import { regularexpressions } from "./regularexpressions";
import { reports } from "./reports";
import { rest } from "./rest";
import { scheduledevents } from "./scheduledevents";
import { security } from "./security";
import { settings } from "./settings";
import { texts } from "./texts";
import { webservices } from "./webservices";
import { workflows } from "./workflows";
import { xmlschemas } from "./xmlschemas";
export interface IBaseModel extends IAbstractModel {
    /**
     * Creates and returns a new element in the SDK and on the server.
     * After creation, assign or add this instance to a property that accepts this kind of elements.
     * @param typeName `structureTypeName` of the element type you want to create
     */
    createElement<T extends keyof ConcreteModelElements>(typeName: T): ConcreteModelElements[T];
    allAuthentications(): rest.IAuthentication[];
    allBuildingBlocks(): pages.IBuildingBlock[];
    allCodeActions(): codeactions.ICodeAction[];
    allConstants(): constants.IConstant[];
    allConsumedAppServices(): appservices.IConsumedAppService[];
    allConsumedBusinessEventServices(): businessevents.IConsumedBusinessEventService[];
    allConsumedKafkaServices(): kafka.IConsumedKafkaService[];
    allConsumedODataServices(): rest.IConsumedODataService[];
    allCustomIconCollections(): customicons.ICustomIconCollection[];
    allDataSets(): datasets.IDataSet[];
    allDocuments(): projects.IDocument[];
    allDocumentTemplates(): documenttemplates.IDocumentTemplate[];
    allDomainModels(): domainmodels.IDomainModel[];
    allEnumerations(): enumerations.IEnumeration[];
    allExportMappings(): exportmappings.IExportMapping[];
    allFolders(): projects.IFolder[];
    allFolderBases(): projects.IFolderBase[];
    allFormBases(): pages.IFormBase[];
    allImageCollections(): images.IImageCollection[];
    allImportMappings(): importmappings.IImportMapping[];
    allImportedWebServices(): webservices.IImportedWebService[];
    allInteractiveRests(): rest.IInteractiveRest[];
    allJavaActions(): javaactions.IJavaAction[];
    allJavaScriptActions(): javascriptactions.IJavaScriptAction[];
    allJsonStructures(): jsonstructures.IJsonStructure[];
    allLayouts(): pages.ILayout[];
    allMLMappingDocuments(): mlmappings.IMLMappingDocument[];
    allMappingDocuments(): mappings.IMappingDocument[];
    allMenuDocuments(): menus.IMenuDocument[];
    allMessageDefinitionCollections(): messagedefinitions.IMessageDefinitionCollection[];
    allMicroflows(): microflows.IMicroflow[];
    allMicroflowBases(): microflows.IMicroflowBase[];
    allModules(): projects.IModule[];
    allModuleDocuments(): projects.IModuleDocument[];
    allModuleSecurities(): security.IModuleSecurity[];
    allModuleSettings(): projects.IModuleSettings[];
    allMxSchemas(): xmlschemas.IMxSchema[];
    allNanoflows(): microflows.INanoflow[];
    allNativeLayouts(): nativepages.INativeLayout[];
    allNativePages(): nativepages.INativePage[];
    allNavigationDocuments(): navigation.INavigationDocument[];
    allPages(): pages.IPage[];
    allPageTemplates(): pages.IPageTemplate[];
    allProjects(): projects.IProject[];
    allProjectConversions(): projects.IProjectConversion[];
    allProjectDocuments(): projects.IProjectDocument[];
    allProjectSecurities(): security.IProjectSecurity[];
    allProjectSettings(): settings.IProjectSettings[];
    allPublishedAppServices(): webservices.IPublishedAppService[];
    allPublishedBusinessEventServices(): businessevents.IPublishedBusinessEventService[];
    allPublishedKafkaServices(): kafka.IPublishedKafkaService[];
    allPublishedODataServices(): rest.IPublishedODataService[];
    allPublishedRestServices(): rest.IPublishedRestService[];
    allPublishedServiceBases(): webservices.IPublishedServiceBase[];
    allPublishedWebServices(): webservices.IPublishedWebService[];
    allQueues(): queues.IQueue[];
    allRegularExpressions(): regularexpressions.IRegularExpression[];
    allRemoteEntitySourceDocuments(): domainmodels.IRemoteEntitySourceDocument[];
    allRules(): microflows.IRule[];
    allScheduledEvents(): scheduledevents.IScheduledEvent[];
    allServerSideMicroflows(): microflows.IServerSideMicroflow[];
    allSnippets(): pages.ISnippet[];
    allSystemTextCollections(): texts.ISystemTextCollection[];
    allTemplateFormBases(): pages.ITemplateFormBase[];
    allWorkflows(): workflows.IWorkflow[];
    allXmlSchemas(): xmlschemas.IXmlSchema[];
    findAppServiceActionByQualifiedName(qname: string): appservices.IAppServiceAction | null;
    findAppServiceActionParameterByQualifiedName(qname: string): appservices.IAppServiceActionParameter | null;
    findConstantByQualifiedName(qname: string): constants.IConstant | null;
    findCustomIconByQualifiedName(qname: string): customicons.ICustomIcon | null;
    findDataSetByQualifiedName(qname: string): datasets.IDataSet | null;
    findDataSetParameterByQualifiedName(qname: string): datasets.IDataSetParameter | null;
    findDocumentTemplateByQualifiedName(qname: string): documenttemplates.IDocumentTemplate | null;
    findAssociationBaseByQualifiedName(qname: string): domainmodels.IAssociationBase | null;
    findAttributeByQualifiedName(qname: string): domainmodels.IAttribute | null;
    findEntityByQualifiedName(qname: string): domainmodels.IEntity | null;
    findRemoteEntitySourceDocumentByQualifiedName(qname: string): domainmodels.IRemoteEntitySourceDocument | null;
    findEnumerationByQualifiedName(qname: string): enumerations.IEnumeration | null;
    findEnumerationValueByQualifiedName(qname: string): enumerations.IEnumerationValue | null;
    findExportMappingByQualifiedName(qname: string): exportmappings.IExportMapping | null;
    findImageByQualifiedName(qname: string): images.IImage | null;
    findImportMappingByQualifiedName(qname: string): importmappings.IImportMapping | null;
    findJavaActionByQualifiedName(qname: string): javaactions.IJavaAction | null;
    findJavaActionParameterByQualifiedName(qname: string): javaactions.IJavaActionParameter | null;
    findJavaScriptActionByQualifiedName(qname: string): javascriptactions.IJavaScriptAction | null;
    findJavaScriptActionParameterByQualifiedName(qname: string): javascriptactions.IJavaScriptActionParameter | null;
    findJsonStructureByQualifiedName(qname: string): jsonstructures.IJsonStructure | null;
    findConsumedKafkaServiceByQualifiedName(qname: string): kafka.IConsumedKafkaService | null;
    findMLMappingDocumentByQualifiedName(qname: string): mlmappings.IMLMappingDocument | null;
    findMenuDocumentByQualifiedName(qname: string): menus.IMenuDocument | null;
    findMessageDefinitionByQualifiedName(qname: string): messagedefinitions.IMessageDefinition | null;
    findMicroflowByQualifiedName(qname: string): microflows.IMicroflow | null;
    findMicroflowParameterByQualifiedName(qname: string): microflows.IMicroflowParameter | null;
    findNanoflowByQualifiedName(qname: string): microflows.INanoflow | null;
    findNanoflowParameterByQualifiedName(qname: string): microflows.INanoflowParameter | null;
    findRuleByQualifiedName(qname: string): microflows.IRule | null;
    findRuleParameterByQualifiedName(qname: string): microflows.IRuleParameter | null;
    findNativeLayoutByQualifiedName(qname: string): nativepages.INativeLayout | null;
    findNativePageByQualifiedName(qname: string): nativepages.INativePage | null;
    findNavigationProfileByQualifiedName(qname: string): navigation.INavigationProfile | null;
    findLayoutByQualifiedName(qname: string): pages.ILayout | null;
    findLayoutParameterByQualifiedName(qname: string): pages.ILayoutParameter | null;
    findPageByQualifiedName(qname: string): pages.IPage | null;
    findPageParameterByQualifiedName(qname: string): pages.IPageParameter | null;
    findSnippetByQualifiedName(qname: string): pages.ISnippet | null;
    findSnippetParameterByQualifiedName(qname: string): pages.ISnippetParameter | null;
    findQueueByQualifiedName(qname: string): queues.IQueue | null;
    findRegularExpressionByQualifiedName(qname: string): regularexpressions.IRegularExpression | null;
    findAuthenticationByQualifiedName(qname: string): rest.IAuthentication | null;
    findConsumedODataServiceByQualifiedName(qname: string): rest.IConsumedODataService | null;
    findModuleRoleByQualifiedName(qname: string): security.IModuleRole | null;
    findUserRoleByQualifiedName(qname: string): security.IUserRole | null;
    findImportedWebServiceByQualifiedName(qname: string): webservices.IImportedWebService | null;
    findParameterByQualifiedName(qname: string): workflows.IParameter | null;
    findUserTaskOutcomeByQualifiedName(qname: string): workflows.IUserTaskOutcome | null;
    findWorkflowByQualifiedName(qname: string): workflows.IWorkflow | null;
    findXmlSchemaByQualifiedName(qname: string): xmlschemas.IXmlSchema | null;
}
/**
 * Class to find generated model units.
 */
export declare abstract class BaseModel extends AbstractModel implements IBaseModel {
    createElement<T extends keyof ConcreteModelElements>(typeName: T): ConcreteModelElements[T];
    allAuthentications(): rest.IAuthentication[];
    allBuildingBlocks(): pages.IBuildingBlock[];
    allCodeActions(): codeactions.ICodeAction[];
    allConstants(): constants.IConstant[];
    allConsumedAppServices(): appservices.IConsumedAppService[];
    allConsumedBusinessEventServices(): businessevents.IConsumedBusinessEventService[];
    allConsumedKafkaServices(): kafka.IConsumedKafkaService[];
    allConsumedODataServices(): rest.IConsumedODataService[];
    allCustomIconCollections(): customicons.ICustomIconCollection[];
    allDataSets(): datasets.IDataSet[];
    allDocuments(): projects.IDocument[];
    allDocumentTemplates(): documenttemplates.IDocumentTemplate[];
    allDomainModels(): domainmodels.IDomainModel[];
    allEnumerations(): enumerations.IEnumeration[];
    allExportMappings(): exportmappings.IExportMapping[];
    allFolders(): projects.IFolder[];
    allFolderBases(): projects.IFolderBase[];
    allFormBases(): pages.IFormBase[];
    allImageCollections(): images.IImageCollection[];
    allImportMappings(): importmappings.IImportMapping[];
    allImportedWebServices(): webservices.IImportedWebService[];
    allInteractiveRests(): rest.IInteractiveRest[];
    allJavaActions(): javaactions.IJavaAction[];
    allJavaScriptActions(): javascriptactions.IJavaScriptAction[];
    allJsonStructures(): jsonstructures.IJsonStructure[];
    allLayouts(): pages.ILayout[];
    allMLMappingDocuments(): mlmappings.IMLMappingDocument[];
    allMappingDocuments(): mappings.IMappingDocument[];
    allMenuDocuments(): menus.IMenuDocument[];
    allMessageDefinitionCollections(): messagedefinitions.IMessageDefinitionCollection[];
    allMicroflows(): microflows.IMicroflow[];
    allMicroflowBases(): microflows.IMicroflowBase[];
    allModules(): projects.IModule[];
    allModuleDocuments(): projects.IModuleDocument[];
    allModuleSecurities(): security.IModuleSecurity[];
    allModuleSettings(): projects.IModuleSettings[];
    allMxSchemas(): xmlschemas.IMxSchema[];
    allNanoflows(): microflows.INanoflow[];
    allNativeLayouts(): nativepages.INativeLayout[];
    allNativePages(): nativepages.INativePage[];
    allNavigationDocuments(): navigation.INavigationDocument[];
    allPages(): pages.IPage[];
    allPageTemplates(): pages.IPageTemplate[];
    allProjects(): projects.IProject[];
    allProjectConversions(): projects.IProjectConversion[];
    allProjectDocuments(): projects.IProjectDocument[];
    allProjectSecurities(): security.IProjectSecurity[];
    allProjectSettings(): settings.IProjectSettings[];
    allPublishedAppServices(): webservices.IPublishedAppService[];
    allPublishedBusinessEventServices(): businessevents.IPublishedBusinessEventService[];
    allPublishedKafkaServices(): kafka.IPublishedKafkaService[];
    allPublishedODataServices(): rest.IPublishedODataService[];
    allPublishedRestServices(): rest.IPublishedRestService[];
    allPublishedServiceBases(): webservices.IPublishedServiceBase[];
    allPublishedWebServices(): webservices.IPublishedWebService[];
    allQueues(): queues.IQueue[];
    allRegularExpressions(): regularexpressions.IRegularExpression[];
    allRemoteEntitySourceDocuments(): domainmodels.IRemoteEntitySourceDocument[];
    allRules(): microflows.IRule[];
    allScheduledEvents(): scheduledevents.IScheduledEvent[];
    allServerSideMicroflows(): microflows.IServerSideMicroflow[];
    allSnippets(): pages.ISnippet[];
    allSystemTextCollections(): texts.ISystemTextCollection[];
    allTemplateFormBases(): pages.ITemplateFormBase[];
    allWorkflows(): workflows.IWorkflow[];
    allXmlSchemas(): xmlschemas.IXmlSchema[];
    findAppServiceActionByQualifiedName(qname: string): appservices.IAppServiceAction | null;
    findAppServiceActionParameterByQualifiedName(qname: string): appservices.IAppServiceActionParameter | null;
    findConstantByQualifiedName(qname: string): constants.IConstant | null;
    findCustomIconByQualifiedName(qname: string): customicons.ICustomIcon | null;
    findDataSetByQualifiedName(qname: string): datasets.IDataSet | null;
    findDataSetParameterByQualifiedName(qname: string): datasets.IDataSetParameter | null;
    findDocumentTemplateByQualifiedName(qname: string): documenttemplates.IDocumentTemplate | null;
    findAssociationBaseByQualifiedName(qname: string): domainmodels.IAssociationBase | null;
    findAttributeByQualifiedName(qname: string): domainmodels.IAttribute | null;
    findEntityByQualifiedName(qname: string): domainmodels.IEntity | null;
    findRemoteEntitySourceDocumentByQualifiedName(qname: string): domainmodels.IRemoteEntitySourceDocument | null;
    findEnumerationByQualifiedName(qname: string): enumerations.IEnumeration | null;
    findEnumerationValueByQualifiedName(qname: string): enumerations.IEnumerationValue | null;
    findExportMappingByQualifiedName(qname: string): exportmappings.IExportMapping | null;
    findImageByQualifiedName(qname: string): images.IImage | null;
    findImportMappingByQualifiedName(qname: string): importmappings.IImportMapping | null;
    findJavaActionByQualifiedName(qname: string): javaactions.IJavaAction | null;
    findJavaActionParameterByQualifiedName(qname: string): javaactions.IJavaActionParameter | null;
    findJavaScriptActionByQualifiedName(qname: string): javascriptactions.IJavaScriptAction | null;
    findJavaScriptActionParameterByQualifiedName(qname: string): javascriptactions.IJavaScriptActionParameter | null;
    findJsonStructureByQualifiedName(qname: string): jsonstructures.IJsonStructure | null;
    findConsumedKafkaServiceByQualifiedName(qname: string): kafka.IConsumedKafkaService | null;
    findMLMappingDocumentByQualifiedName(qname: string): mlmappings.IMLMappingDocument | null;
    findMenuDocumentByQualifiedName(qname: string): menus.IMenuDocument | null;
    findMessageDefinitionByQualifiedName(qname: string): messagedefinitions.IMessageDefinition | null;
    findMicroflowByQualifiedName(qname: string): microflows.IMicroflow | null;
    findMicroflowParameterByQualifiedName(qname: string): microflows.IMicroflowParameter | null;
    findNanoflowByQualifiedName(qname: string): microflows.INanoflow | null;
    findNanoflowParameterByQualifiedName(qname: string): microflows.INanoflowParameter | null;
    findRuleByQualifiedName(qname: string): microflows.IRule | null;
    findRuleParameterByQualifiedName(qname: string): microflows.IRuleParameter | null;
    findNativeLayoutByQualifiedName(qname: string): nativepages.INativeLayout | null;
    findNativePageByQualifiedName(qname: string): nativepages.INativePage | null;
    findNavigationProfileByQualifiedName(qname: string): navigation.INavigationProfile | null;
    findLayoutByQualifiedName(qname: string): pages.ILayout | null;
    findLayoutParameterByQualifiedName(qname: string): pages.ILayoutParameter | null;
    findPageByQualifiedName(qname: string): pages.IPage | null;
    findPageParameterByQualifiedName(qname: string): pages.IPageParameter | null;
    findSnippetByQualifiedName(qname: string): pages.ISnippet | null;
    findSnippetParameterByQualifiedName(qname: string): pages.ISnippetParameter | null;
    findQueueByQualifiedName(qname: string): queues.IQueue | null;
    findRegularExpressionByQualifiedName(qname: string): regularexpressions.IRegularExpression | null;
    findAuthenticationByQualifiedName(qname: string): rest.IAuthentication | null;
    findConsumedODataServiceByQualifiedName(qname: string): rest.IConsumedODataService | null;
    findModuleRoleByQualifiedName(qname: string): security.IModuleRole | null;
    findUserRoleByQualifiedName(qname: string): security.IUserRole | null;
    findImportedWebServiceByQualifiedName(qname: string): webservices.IImportedWebService | null;
    findParameterByQualifiedName(qname: string): workflows.IParameter | null;
    findUserTaskOutcomeByQualifiedName(qname: string): workflows.IUserTaskOutcome | null;
    findWorkflowByQualifiedName(qname: string): workflows.IWorkflow | null;
    findXmlSchemaByQualifiedName(qname: string): xmlschemas.IXmlSchema | null;
}
/**
 * This interface exposes a single Mendix Model.
 * This interface contains the parts of the {@link Model} that are exposed through the SDK.
 */
export interface IModel extends IBaseModel {
    /**
     * The actual contents of the model.
     */
    root: projects.IProject;
    /**
     * Given a qualified name, returns a Module.
     */
    findModuleByQualifiedName(qualifiedName: string): projects.IModule | null;
}
export declare type ConcreteModelElements = {
    AppServices$AppServiceAction: appservices.AppServiceAction;
    AppServices$AppServiceActionParameter: appservices.AppServiceActionParameter;
    AppServices$Msd: appservices.Msd;
    AppServices$MsdAssociation: appservices.MsdAssociation;
    AppServices$MsdAttribute: appservices.MsdAttribute;
    AppServices$MsdDomainModel: appservices.MsdDomainModel;
    AppServices$MsdEntity: appservices.MsdEntity;
    AppServices$MsdEnumeration: appservices.MsdEnumeration;
    AppServices$MsdEnumerationContainer: appservices.MsdEnumerationContainer;
    AppServices$MsdEnumerationValue: appservices.MsdEnumerationValue;
    AppServices$MsdMetadata: appservices.MsdMetadata;
    AppServices$MsdMicroflow: appservices.MsdMicroflow;
    AppServices$MsdMicroflowParameter: appservices.MsdMicroflowParameter;
    AppServices$MsdText: appservices.MsdText;
    AppServices$MsdVersion: appservices.MsdVersion;
    BusinessEvents$ConsumedBusinessEvent: businessevents.ConsumedBusinessEvent;
    BusinessEvents$PublishedChannel: businessevents.PublishedChannel;
    BusinessEvents$PublishedMessage: businessevents.PublishedMessage;
    BusinessEvents$PublishedMessageAttribute: businessevents.PublishedMessageAttribute;
    CodeActions$BasicParameterType: codeactions.BasicParameterType;
    CodeActions$BooleanType: codeactions.BooleanType;
    CodeActions$ConcreteEntityType: codeactions.ConcreteEntityType;
    CodeActions$DateTimeType: codeactions.DateTimeType;
    CodeActions$DecimalType: codeactions.DecimalType;
    CodeActions$EntityTypeParameterType: codeactions.EntityTypeParameterType;
    CodeActions$EnumerationType: codeactions.EnumerationType;
    CodeActions$FloatType: codeactions.FloatType;
    CodeActions$IntegerType: codeactions.IntegerType;
    CodeActions$ListType: codeactions.ListType;
    CodeActions$MicroflowActionInfo: codeactions.MicroflowActionInfo;
    CodeActions$ParameterizedEntityType: codeactions.ParameterizedEntityType;
    CodeActions$StringTemplateParameterType: codeactions.StringTemplateParameterType;
    CodeActions$StringType: codeactions.StringType;
    CodeActions$TypeParameter: codeactions.TypeParameter;
    CodeActions$VoidType: codeactions.VoidType;
    CustomIcons$CustomIcon: customicons.CustomIcon;
    CustomWidgets$CustomWidget: customwidgets.CustomWidget;
    CustomWidgets$CustomWidgetDatabaseSource: customwidgets.CustomWidgetDatabaseSource;
    CustomWidgets$CustomWidgetType: customwidgets.CustomWidgetType;
    CustomWidgets$CustomWidgetXPathSource: customwidgets.CustomWidgetXPathSource;
    CustomWidgets$WidgetEnumerationValue: customwidgets.WidgetEnumerationValue;
    CustomWidgets$WidgetObject: customwidgets.WidgetObject;
    CustomWidgets$WidgetObjectType: customwidgets.WidgetObjectType;
    CustomWidgets$WidgetProperty: customwidgets.WidgetProperty;
    CustomWidgets$WidgetPropertyType: customwidgets.WidgetPropertyType;
    CustomWidgets$WidgetReturnType: customwidgets.WidgetReturnType;
    CustomWidgets$WidgetTranslation: customwidgets.WidgetTranslation;
    CustomWidgets$WidgetValue: customwidgets.WidgetValue;
    CustomWidgets$WidgetValueType: customwidgets.WidgetValueType;
    DataSets$DataSetAccess: datasets.DataSetAccess;
    DataSets$DataSetColumn: datasets.DataSetColumn;
    DataSets$DataSetConstraintAccess: datasets.DataSetConstraintAccess;
    DataSets$DataSetDateTimeConstraint: datasets.DataSetDateTimeConstraint;
    DataSets$DataSetModuleRoleAccess: datasets.DataSetModuleRoleAccess;
    DataSets$DataSetNumericConstraint: datasets.DataSetNumericConstraint;
    DataSets$DataSetObjectConstraint: datasets.DataSetObjectConstraint;
    DataSets$DataSetParameter: datasets.DataSetParameter;
    DataSets$DataSetParameterAccess: datasets.DataSetParameterAccess;
    DataSets$JavaDataSetSource: datasets.JavaDataSetSource;
    DataSets$OqlDataSetSource: datasets.OqlDataSetSource;
    DataTypes$BinaryType: datatypes.BinaryType;
    DataTypes$BooleanType: datatypes.BooleanType;
    DataTypes$DateTimeType: datatypes.DateTimeType;
    DataTypes$DecimalType: datatypes.DecimalType;
    DataTypes$EmptyType: datatypes.EmptyType;
    DataTypes$EnumerationType: datatypes.EnumerationType;
    DataTypes$FloatType: datatypes.FloatType;
    DataTypes$IntegerType: datatypes.IntegerType;
    DataTypes$ListType: datatypes.ListType;
    DataTypes$ObjectType: datatypes.ObjectType;
    DataTypes$StringType: datatypes.StringType;
    DataTypes$UnknownType: datatypes.UnknownType;
    DataTypes$VoidType: datatypes.VoidType;
    DocumentTemplates$ConditionSettings: documenttemplates.ConditionSettings;
    DocumentTemplates$DataGrid: documenttemplates.DataGrid;
    DocumentTemplates$DataGridCell: documenttemplates.DataGridCell;
    DocumentTemplates$DataGridColumn: documenttemplates.DataGridColumn;
    DocumentTemplates$DataView: documenttemplates.DataView;
    DocumentTemplates$DataViewContents: documenttemplates.DataViewContents;
    DocumentTemplates$DocumentTemplateParameter: documenttemplates.DocumentTemplateParameter;
    DocumentTemplates$DynamicImageViewer: documenttemplates.DynamicImageViewer;
    DocumentTemplates$DynamicLabel: documenttemplates.DynamicLabel;
    DocumentTemplates$Footer: documenttemplates.Footer;
    DocumentTemplates$GridSortBar: documenttemplates.GridSortBar;
    DocumentTemplates$GridSortItem: documenttemplates.GridSortItem;
    DocumentTemplates$Header: documenttemplates.Header;
    DocumentTemplates$LineBreak: documenttemplates.LineBreak;
    DocumentTemplates$PageBreak: documenttemplates.PageBreak;
    DocumentTemplates$StaticImageViewer: documenttemplates.StaticImageViewer;
    DocumentTemplates$StaticLabel: documenttemplates.StaticLabel;
    DocumentTemplates$Style: documenttemplates.Style;
    DocumentTemplates$Table: documenttemplates.Table;
    DocumentTemplates$TableCell: documenttemplates.TableCell;
    DocumentTemplates$TableRow: documenttemplates.TableRow;
    DocumentTemplates$TemplateGrid: documenttemplates.TemplateGrid;
    DocumentTemplates$TemplateGridContents: documenttemplates.TemplateGridContents;
    DocumentTemplates$Title: documenttemplates.Title;
    DomainModels$AccessRule: domainmodels.AccessRule;
    DomainModels$Annotation: domainmodels.Annotation;
    DomainModels$Association: domainmodels.Association;
    DomainModels$AssociationCapabilities: domainmodels.AssociationCapabilities;
    DomainModels$AssociationDeleteBehavior: domainmodels.AssociationDeleteBehavior;
    DomainModels$AssociationRef: domainmodels.AssociationRef;
    DomainModels$Attribute: domainmodels.Attribute;
    DomainModels$AttributeCapabilities: domainmodels.AttributeCapabilities;
    DomainModels$AttributeRef: domainmodels.AttributeRef;
    DomainModels$AutoNumberAttributeType: domainmodels.AutoNumberAttributeType;
    DomainModels$BinaryAttributeType: domainmodels.BinaryAttributeType;
    DomainModels$BooleanAttributeType: domainmodels.BooleanAttributeType;
    DomainModels$CalculatedValue: domainmodels.CalculatedValue;
    DomainModels$CrossAssociation: domainmodels.CrossAssociation;
    DomainModels$CurrencyAttributeType: domainmodels.CurrencyAttributeType;
    DomainModels$DateTimeAttributeType: domainmodels.DateTimeAttributeType;
    DomainModels$DecimalAttributeType: domainmodels.DecimalAttributeType;
    DomainModels$DirectEntityRef: domainmodels.DirectEntityRef;
    DomainModels$Entity: domainmodels.Entity;
    DomainModels$EntityCapabilities: domainmodels.EntityCapabilities;
    DomainModels$EntityKey: domainmodels.EntityKey;
    DomainModels$EntityKeyPart: domainmodels.EntityKeyPart;
    DomainModels$EntityRefStep: domainmodels.EntityRefStep;
    DomainModels$EnumerationAttributeType: domainmodels.EnumerationAttributeType;
    DomainModels$EqualsToRuleInfo: domainmodels.EqualsToRuleInfo;
    DomainModels$EventHandler: domainmodels.EventHandler;
    DomainModels$FloatAttributeType: domainmodels.FloatAttributeType;
    DomainModels$Generalization: domainmodels.Generalization;
    DomainModels$HashedStringAttributeType: domainmodels.HashedStringAttributeType;
    DomainModels$Index: domainmodels.Index;
    DomainModels$IndexedAttribute: domainmodels.IndexedAttribute;
    DomainModels$IndirectEntityRef: domainmodels.IndirectEntityRef;
    DomainModels$IntegerAttributeType: domainmodels.IntegerAttributeType;
    DomainModels$LongAttributeType: domainmodels.LongAttributeType;
    DomainModels$MaxLengthRuleInfo: domainmodels.MaxLengthRuleInfo;
    DomainModels$MemberAccess: domainmodels.MemberAccess;
    DomainModels$NoGeneralization: domainmodels.NoGeneralization;
    DomainModels$RangeRuleInfo: domainmodels.RangeRuleInfo;
    DomainModels$RegExRuleInfo: domainmodels.RegExRuleInfo;
    DomainModels$RequiredRuleInfo: domainmodels.RequiredRuleInfo;
    DomainModels$StoredValue: domainmodels.StoredValue;
    DomainModels$StringAttributeType: domainmodels.StringAttributeType;
    DomainModels$UniqueRuleInfo: domainmodels.UniqueRuleInfo;
    DomainModels$ValidationRule: domainmodels.ValidationRule;
    Enumerations$Condition: enumerations.Condition;
    Enumerations$EnumerationValue: enumerations.EnumerationValue;
    ExportMappings$ExportObjectMappingElement: exportmappings.ExportObjectMappingElement;
    ExportMappings$ExportValueMappingElement: exportmappings.ExportValueMappingElement;
    Expressions$BinaryExpression: expressions.BinaryExpression;
    Expressions$BooleanLiteral: expressions.BooleanLiteral;
    Expressions$ConstantRefExpression: expressions.ConstantRefExpression;
    Expressions$EmptyLiteral: expressions.EmptyLiteral;
    Expressions$EnumerationValueRefExpression: expressions.EnumerationValueRefExpression;
    Expressions$FloatLiteral: expressions.FloatLiteral;
    Expressions$FunctionCallExpression: expressions.FunctionCallExpression;
    Expressions$GlobalVariableRef: expressions.GlobalVariableRef;
    Expressions$IfExpression: expressions.IfExpression;
    Expressions$IntegerLiteral: expressions.IntegerLiteral;
    Expressions$NoExpression: expressions.NoExpression;
    Expressions$NoVariableRef: expressions.NoVariableRef;
    Expressions$ParenthesisExpression: expressions.ParenthesisExpression;
    Expressions$StringLiteral: expressions.StringLiteral;
    Expressions$UnaryExpression: expressions.UnaryExpression;
    Expressions$UnparsableExpression: expressions.UnparsableExpression;
    Expressions$VariableRefExpression: expressions.VariableRefExpression;
    Images$Image: images.Image;
    ImportMappings$ImportObjectMappingElement: importmappings.ImportObjectMappingElement;
    ImportMappings$ImportValueMappingElement: importmappings.ImportValueMappingElement;
    JavaActions$BasicParameterType: javaactions.BasicParameterType;
    JavaActions$BooleanType: javaactions.BooleanType;
    JavaActions$ConcreteEntityType: javaactions.ConcreteEntityType;
    JavaActions$DateTimeType: javaactions.DateTimeType;
    JavaActions$DecimalType: javaactions.DecimalType;
    JavaActions$EntityTypeParameterType: javaactions.EntityTypeParameterType;
    JavaActions$EnumerationType: javaactions.EnumerationType;
    JavaActions$ExportMappingJavaActionParameterType: javaactions.ExportMappingJavaActionParameterType;
    JavaActions$ExportMappingParameterType: javaactions.ExportMappingParameterType;
    JavaActions$FloatType: javaactions.FloatType;
    JavaActions$ImportMappingJavaActionParameterType: javaactions.ImportMappingJavaActionParameterType;
    JavaActions$ImportMappingParameterType: javaactions.ImportMappingParameterType;
    JavaActions$IntegerType: javaactions.IntegerType;
    JavaActions$JavaActionParameter: javaactions.JavaActionParameter;
    JavaActions$ListType: javaactions.ListType;
    JavaActions$MicroflowActionInfo: javaactions.MicroflowActionInfo;
    JavaActions$MicroflowJavaActionParameterType: javaactions.MicroflowJavaActionParameterType;
    JavaActions$MicroflowParameterType: javaactions.MicroflowParameterType;
    JavaActions$ParameterizedEntityType: javaactions.ParameterizedEntityType;
    JavaActions$StringType: javaactions.StringType;
    JavaActions$TypeParameter: javaactions.TypeParameter;
    JavaScriptActions$JavaScriptActionParameter: javascriptactions.JavaScriptActionParameter;
    JavaScriptActions$NanoflowJavaScriptActionParameterType: javascriptactions.NanoflowJavaScriptActionParameterType;
    JsonStructures$JsonElement: jsonstructures.JsonElement;
    Kafka$KafkaMappedValue: kafka.KafkaMappedValue;
    Kafka$KafkaRemoteEntitySource: kafka.KafkaRemoteEntitySource;
    Kafka$PublishedKafkaResource: kafka.PublishedKafkaResource;
    Kafka$PublishedKafkaResourceAttribute: kafka.PublishedKafkaResourceAttribute;
    MLMappings$MLModelEntityMappings: mlmappings.MLModelEntityMappings;
    MLMappings$MLModelMappings: mlmappings.MLModelMappings;
    MLMappings$TensorDimension: mlmappings.TensorDimension;
    MLMappings$TensorMappingElement: mlmappings.TensorMappingElement;
    Mappings$MappingMicroflowCall: mappings.MappingMicroflowCall;
    Mappings$MappingMicroflowParameter: mappings.MappingMicroflowParameter;
    Menus$MenuItem: menus.MenuItem;
    Menus$MenuItemCollection: menus.MenuItemCollection;
    MessageDefinitions$AssociationElement: messagedefinitions.AssociationElement;
    MessageDefinitions$AttributeElement: messagedefinitions.AttributeElement;
    MessageDefinitions$EntityElement: messagedefinitions.EntityElement;
    MessageDefinitions$EntityMessageDefinition: messagedefinitions.EntityMessageDefinition;
    MessageDefinitions$ExposedAssociation: messagedefinitions.ExposedAssociation;
    MessageDefinitions$ExposedAttribute: messagedefinitions.ExposedAttribute;
    MessageDefinitions$ExposedEntity: messagedefinitions.ExposedEntity;
    Microflows$AbortOperation: microflows.AbortOperation;
    Microflows$ActionActivity: microflows.ActionActivity;
    Microflows$AdvancedRequestHandling: microflows.AdvancedRequestHandling;
    Microflows$AggregateListAction: microflows.AggregateListAction;
    Microflows$Annotation: microflows.Annotation;
    Microflows$AnnotationFlow: microflows.AnnotationFlow;
    Microflows$AppServiceCallAction: microflows.AppServiceCallAction;
    Microflows$AppServiceCallParameterMapping: microflows.AppServiceCallParameterMapping;
    Microflows$ApplyJumpToOptionAction: microflows.ApplyJumpToOptionAction;
    Microflows$AssociationRetrieveSource: microflows.AssociationRetrieveSource;
    Microflows$BasicCodeActionParameterValue: microflows.BasicCodeActionParameterValue;
    Microflows$BasicJavaActionParameterValue: microflows.BasicJavaActionParameterValue;
    Microflows$BinaryRequestHandling: microflows.BinaryRequestHandling;
    Microflows$BreakEvent: microflows.BreakEvent;
    Microflows$CallExternalAction: microflows.CallExternalAction;
    Microflows$CastAction: microflows.CastAction;
    Microflows$ChangeListAction: microflows.ChangeListAction;
    Microflows$ChangeObjectAction: microflows.ChangeObjectAction;
    Microflows$ChangeVariableAction: microflows.ChangeVariableAction;
    Microflows$CloseFormAction: microflows.CloseFormAction;
    Microflows$CommitAction: microflows.CommitAction;
    Microflows$ConstantRange: microflows.ConstantRange;
    Microflows$Contains: microflows.Contains;
    Microflows$ContinueEvent: microflows.ContinueEvent;
    Microflows$ContinueOperation: microflows.ContinueOperation;
    Microflows$CounterMeterAction: microflows.CounterMeterAction;
    Microflows$CreateListAction: microflows.CreateListAction;
    Microflows$CreateObjectAction: microflows.CreateObjectAction;
    Microflows$CreateVariableAction: microflows.CreateVariableAction;
    Microflows$CustomRange: microflows.CustomRange;
    Microflows$CustomRequestHandling: microflows.CustomRequestHandling;
    Microflows$DatabaseRetrieveSource: microflows.DatabaseRetrieveSource;
    Microflows$DeleteAction: microflows.DeleteAction;
    Microflows$DeleteExternalObject: microflows.DeleteExternalObject;
    Microflows$DocumentTemplateParameterMapping: microflows.DocumentTemplateParameterMapping;
    Microflows$DownloadFileAction: microflows.DownloadFileAction;
    Microflows$EndEvent: microflows.EndEvent;
    Microflows$EntityTypeCodeActionParameterValue: microflows.EntityTypeCodeActionParameterValue;
    Microflows$EntityTypeJavaActionParameterValue: microflows.EntityTypeJavaActionParameterValue;
    Microflows$EnumerationCase: microflows.EnumerationCase;
    Microflows$ErrorEvent: microflows.ErrorEvent;
    Microflows$ExclusiveMerge: microflows.ExclusiveMerge;
    Microflows$ExclusiveSplit: microflows.ExclusiveSplit;
    Microflows$ExportMappingJavaActionParameterValue: microflows.ExportMappingJavaActionParameterValue;
    Microflows$ExportMappingParameterValue: microflows.ExportMappingParameterValue;
    Microflows$ExportXmlAction: microflows.ExportXmlAction;
    Microflows$ExpressionSplitCondition: microflows.ExpressionSplitCondition;
    Microflows$FileDocumentExport: microflows.FileDocumentExport;
    Microflows$Filter: microflows.Filter;
    Microflows$FilterByExpression: microflows.FilterByExpression;
    Microflows$Find: microflows.Find;
    Microflows$FindByExpression: microflows.FindByExpression;
    Microflows$FormDataPart: microflows.FormDataPart;
    Microflows$FormDataRequestHandling: microflows.FormDataRequestHandling;
    Microflows$GaugeMeterAction: microflows.GaugeMeterAction;
    Microflows$GenerateDocumentAction: microflows.GenerateDocumentAction;
    Microflows$GenerateJumpToOptionsAction: microflows.GenerateJumpToOptionsAction;
    Microflows$GetWorkflowDataAction: microflows.GetWorkflowDataAction;
    Microflows$Head: microflows.Head;
    Microflows$HttpConfiguration: microflows.HttpConfiguration;
    Microflows$HttpHeaderEntry: microflows.HttpHeaderEntry;
    Microflows$ImportMappingCall: microflows.ImportMappingCall;
    Microflows$ImportMappingJavaActionParameterValue: microflows.ImportMappingJavaActionParameterValue;
    Microflows$ImportMappingParameterValue: microflows.ImportMappingParameterValue;
    Microflows$ImportXmlAction: microflows.ImportXmlAction;
    Microflows$IncrementCounterMeterAction: microflows.IncrementCounterMeterAction;
    Microflows$InheritanceCase: microflows.InheritanceCase;
    Microflows$InheritanceSplit: microflows.InheritanceSplit;
    Microflows$Intersect: microflows.Intersect;
    Microflows$IterableList: microflows.IterableList;
    Microflows$JavaActionCallAction: microflows.JavaActionCallAction;
    Microflows$JavaActionParameterMapping: microflows.JavaActionParameterMapping;
    Microflows$JavaScriptActionCallAction: microflows.JavaScriptActionCallAction;
    Microflows$JavaScriptActionParameterMapping: microflows.JavaScriptActionParameterMapping;
    Microflows$ListEquals: microflows.ListEquals;
    Microflows$ListOperationAction: microflows.ListOperationAction;
    Microflows$LockWorkflowAction: microflows.LockWorkflowAction;
    Microflows$LogMessageAction: microflows.LogMessageAction;
    Microflows$LoopedActivity: microflows.LoopedActivity;
    Microflows$MLModelCall: microflows.MLModelCall;
    Microflows$MLModelCallAction: microflows.MLModelCallAction;
    Microflows$MLModelCallParameterMapping: microflows.MLModelCallParameterMapping;
    Microflows$MappingRequestHandling: microflows.MappingRequestHandling;
    Microflows$MemberChange: microflows.MemberChange;
    Microflows$MeterTagMapping: microflows.MeterTagMapping;
    Microflows$MicroflowCall: microflows.MicroflowCall;
    Microflows$MicroflowCallAction: microflows.MicroflowCallAction;
    Microflows$MicroflowCallParameterMapping: microflows.MicroflowCallParameterMapping;
    Microflows$MicroflowJavaActionParameterValue: microflows.MicroflowJavaActionParameterValue;
    Microflows$MicroflowObjectCollection: microflows.MicroflowObjectCollection;
    Microflows$MicroflowParameter: microflows.MicroflowParameter;
    Microflows$MicroflowParameterObject: microflows.MicroflowParameterObject;
    Microflows$MicroflowParameterValue: microflows.MicroflowParameterValue;
    Microflows$NanoflowCall: microflows.NanoflowCall;
    Microflows$NanoflowCallAction: microflows.NanoflowCallAction;
    Microflows$NanoflowCallParameterMapping: microflows.NanoflowCallParameterMapping;
    Microflows$NanoflowParameter: microflows.NanoflowParameter;
    Microflows$NoCase: microflows.NoCase;
    Microflows$OpenUserTaskAction: microflows.OpenUserTaskAction;
    Microflows$OpenWorkflowAction: microflows.OpenWorkflowAction;
    Microflows$PauseOperation: microflows.PauseOperation;
    Microflows$PrimitiveTypedTemplateArgument: microflows.PrimitiveTypedTemplateArgument;
    Microflows$ProxyConfiguration: microflows.ProxyConfiguration;
    Microflows$PushToClientAction: microflows.PushToClientAction;
    Microflows$RestCallAction: microflows.RestCallAction;
    Microflows$RestartOperation: microflows.RestartOperation;
    Microflows$ResultHandling: microflows.ResultHandling;
    Microflows$ResumeOperation: microflows.ResumeOperation;
    Microflows$RetrieveAction: microflows.RetrieveAction;
    Microflows$RetryOperation: microflows.RetryOperation;
    Microflows$RollbackAction: microflows.RollbackAction;
    Microflows$RuleCall: microflows.RuleCall;
    Microflows$RuleCallParameterMapping: microflows.RuleCallParameterMapping;
    Microflows$RuleParameter: microflows.RuleParameter;
    Microflows$RuleSplitCondition: microflows.RuleSplitCondition;
    Microflows$SendExternalObject: microflows.SendExternalObject;
    Microflows$SequenceFlow: microflows.SequenceFlow;
    Microflows$SetTaskOutcomeAction: microflows.SetTaskOutcomeAction;
    Microflows$ShowHomePageAction: microflows.ShowHomePageAction;
    Microflows$ShowMessageAction: microflows.ShowMessageAction;
    Microflows$ShowPageAction: microflows.ShowPageAction;
    Microflows$SimpleRequestHandling: microflows.SimpleRequestHandling;
    Microflows$Sort: microflows.Sort;
    Microflows$SortItem: microflows.SortItem;
    Microflows$SortItemList: microflows.SortItemList;
    Microflows$StartEvent: microflows.StartEvent;
    Microflows$StringTemplate: microflows.StringTemplate;
    Microflows$StringTemplateParameterValue: microflows.StringTemplateParameterValue;
    Microflows$Subtract: microflows.Subtract;
    Microflows$SynchronizeAction: microflows.SynchronizeAction;
    Microflows$Tail: microflows.Tail;
    Microflows$TemplateArgument: microflows.TemplateArgument;
    Microflows$TextTemplate: microflows.TextTemplate;
    Microflows$TypedTemplate: microflows.TypedTemplate;
    Microflows$Union: microflows.Union;
    Microflows$UnlockWorkflowAction: microflows.UnlockWorkflowAction;
    Microflows$UnpauseOperation: microflows.UnpauseOperation;
    Microflows$ValidationFeedbackAction: microflows.ValidationFeedbackAction;
    Microflows$VariableExport: microflows.VariableExport;
    Microflows$WebServiceCallAction: microflows.WebServiceCallAction;
    Microflows$WebServiceOperationAdvancedParameterMapping: microflows.WebServiceOperationAdvancedParameterMapping;
    Microflows$WebServiceOperationSimpleParameterMapping: microflows.WebServiceOperationSimpleParameterMapping;
    Microflows$WhileLoopCondition: microflows.WhileLoopCondition;
    Microflows$WorkflowCallAction: microflows.WorkflowCallAction;
    Microflows$WorkflowOperationAction: microflows.WorkflowOperationAction;
    Nanoflows$NanoflowParameterValue: nanoflows.NanoflowParameterValue;
    NativePages$BottomBarItem: nativepages.BottomBarItem;
    NativePages$NativeLayoutCallArgument: nativepages.NativeLayoutCallArgument;
    NativePages$NativePageClientAction: nativepages.NativePageClientAction;
    NativePages$NativePlaceholder: nativepages.NativePlaceholder;
    Navigation$HomePage: navigation.HomePage;
    Navigation$NativeHomePage: navigation.NativeHomePage;
    Navigation$NativeNavigationProfile: navigation.NativeNavigationProfile;
    Navigation$NavigationProfile: navigation.NavigationProfile;
    Navigation$OfflineEntityConfig: navigation.OfflineEntityConfig;
    Navigation$ProgressiveWebAppSettings: navigation.ProgressiveWebAppSettings;
    Navigation$RoleBasedHomePage: navigation.RoleBasedHomePage;
    Navigation$RoleBasedNativeHomePage: navigation.RoleBasedNativeHomePage;
    Pages$ActionButton: pages.ActionButton;
    Pages$Appearance: pages.Appearance;
    Pages$AssociationSource: pages.AssociationSource;
    Pages$BackButton: pages.BackButton;
    Pages$CallNanoflowClientAction: pages.CallNanoflowClientAction;
    Pages$CallWorkflowClientAction: pages.CallWorkflowClientAction;
    Pages$CancelButton: pages.CancelButton;
    Pages$CancelChangesClientAction: pages.CancelChangesClientAction;
    Pages$CheckBox: pages.CheckBox;
    Pages$ClientTemplate: pages.ClientTemplate;
    Pages$ClientTemplateParameter: pages.ClientTemplateParameter;
    Pages$ClosePageClientAction: pages.ClosePageClientAction;
    Pages$ComparisonSearchField: pages.ComparisonSearchField;
    Pages$ConditionalEditabilitySettings: pages.ConditionalEditabilitySettings;
    Pages$ConditionalVisibilitySettings: pages.ConditionalVisibilitySettings;
    Pages$ConfirmationInfo: pages.ConfirmationInfo;
    Pages$CreateObjectClientAction: pages.CreateObjectClientAction;
    Pages$DataGrid: pages.DataGrid;
    Pages$DataGridAddButton: pages.DataGridAddButton;
    Pages$DataGridExportToCSVButton: pages.DataGridExportToCSVButton;
    Pages$DataGridExportToExcelButton: pages.DataGridExportToExcelButton;
    Pages$DataGridRemoveButton: pages.DataGridRemoveButton;
    Pages$DataView: pages.DataView;
    Pages$DataViewActionButton: pages.DataViewActionButton;
    Pages$DataViewCancelButton: pages.DataViewCancelButton;
    Pages$DataViewCloseButton: pages.DataViewCloseButton;
    Pages$DataViewControlBar: pages.DataViewControlBar;
    Pages$DataViewSaveButton: pages.DataViewSaveButton;
    Pages$DataViewSource: pages.DataViewSource;
    Pages$DatabaseConstraint: pages.DatabaseConstraint;
    Pages$DatePicker: pages.DatePicker;
    Pages$DeleteClientAction: pages.DeleteClientAction;
    Pages$DesignPropertyValue: pages.DesignPropertyValue;
    Pages$DivContainer: pages.DivContainer;
    Pages$DropDown: pages.DropDown;
    Pages$DropDownButton: pages.DropDownButton;
    Pages$DropDownButtonItem: pages.DropDownButtonItem;
    Pages$DropDownSearchField: pages.DropDownSearchField;
    Pages$DynamicImageViewer: pages.DynamicImageViewer;
    Pages$DynamicText: pages.DynamicText;
    Pages$EditPageTemplateType: pages.EditPageTemplateType;
    Pages$FileManager: pages.FileManager;
    Pages$FormattingInfo: pages.FormattingInfo;
    Pages$GlyphIcon: pages.GlyphIcon;
    Pages$GridActionButton: pages.GridActionButton;
    Pages$GridColumn: pages.GridColumn;
    Pages$GridControlBar: pages.GridControlBar;
    Pages$GridDatabaseSource: pages.GridDatabaseSource;
    Pages$GridDeleteButton: pages.GridDeleteButton;
    Pages$GridDeselectAllButton: pages.GridDeselectAllButton;
    Pages$GridEditButton: pages.GridEditButton;
    Pages$GridNewButton: pages.GridNewButton;
    Pages$GridSearchButton: pages.GridSearchButton;
    Pages$GridSelectAllButton: pages.GridSelectAllButton;
    Pages$GridSortBar: pages.GridSortBar;
    Pages$GridSortItem: pages.GridSortItem;
    Pages$GridXPathSource: pages.GridXPathSource;
    Pages$GroupBox: pages.GroupBox;
    Pages$Header: pages.Header;
    Pages$HorizontalSplitPane: pages.HorizontalSplitPane;
    Pages$IconCollectionIcon: pages.IconCollectionIcon;
    Pages$ImageIcon: pages.ImageIcon;
    Pages$ImageUploader: pages.ImageUploader;
    Pages$ImageViewerSource: pages.ImageViewerSource;
    Pages$InputReferenceSetSelector: pages.InputReferenceSetSelector;
    Pages$Label: pages.Label;
    Pages$LayoutCall: pages.LayoutCall;
    Pages$LayoutCallArgument: pages.LayoutCallArgument;
    Pages$LayoutGrid: pages.LayoutGrid;
    Pages$LayoutGridColumn: pages.LayoutGridColumn;
    Pages$LayoutGridRow: pages.LayoutGridRow;
    Pages$LayoutParameter: pages.LayoutParameter;
    Pages$LinkButton: pages.LinkButton;
    Pages$ListView: pages.ListView;
    Pages$ListViewDatabaseSource: pages.ListViewDatabaseSource;
    Pages$ListViewSearch: pages.ListViewSearch;
    Pages$ListViewTemplate: pages.ListViewTemplate;
    Pages$ListViewXPathSource: pages.ListViewXPathSource;
    Pages$ListenTargetSource: pages.ListenTargetSource;
    Pages$LoginButton: pages.LoginButton;
    Pages$LoginIdTextBox: pages.LoginIdTextBox;
    Pages$LogoutButton: pages.LogoutButton;
    Pages$MasterDetail: pages.MasterDetail;
    Pages$MasterDetailDetailRegion: pages.MasterDetailDetailRegion;
    Pages$MasterDetailMasterRegion: pages.MasterDetailMasterRegion;
    Pages$MenuBar: pages.MenuBar;
    Pages$MenuDocumentSource: pages.MenuDocumentSource;
    Pages$MicroflowClientAction: pages.MicroflowClientAction;
    Pages$MicroflowParameterMapping: pages.MicroflowParameterMapping;
    Pages$MicroflowSettings: pages.MicroflowSettings;
    Pages$MicroflowSource: pages.MicroflowSource;
    Pages$NanoflowParameterMapping: pages.NanoflowParameterMapping;
    Pages$NanoflowSource: pages.NanoflowSource;
    Pages$NativeLayoutContent: pages.NativeLayoutContent;
    Pages$NavigationList: pages.NavigationList;
    Pages$NavigationListItem: pages.NavigationListItem;
    Pages$NavigationSource: pages.NavigationSource;
    Pages$NavigationTree: pages.NavigationTree;
    Pages$NewButton: pages.NewButton;
    Pages$NoClientAction: pages.NoClientAction;
    Pages$OfflineSchema: pages.OfflineSchema;
    Pages$OfflineSchemaFetchInstruction: pages.OfflineSchemaFetchInstruction;
    Pages$OnClickEnlarge: pages.OnClickEnlarge;
    Pages$OnClickMicroflow: pages.OnClickMicroflow;
    Pages$OnClickNothing: pages.OnClickNothing;
    Pages$OpenLinkClientAction: pages.OpenLinkClientAction;
    Pages$OpenUserTaskClientAction: pages.OpenUserTaskClientAction;
    Pages$OpenWorkflowClientAction: pages.OpenWorkflowClientAction;
    Pages$PageClientAction: pages.PageClientAction;
    Pages$PageForSpecialization: pages.PageForSpecialization;
    Pages$PageParameter: pages.PageParameter;
    Pages$PageParameterMapping: pages.PageParameterMapping;
    Pages$PageSettings: pages.PageSettings;
    Pages$PageVariable: pages.PageVariable;
    Pages$PasswordTextBox: pages.PasswordTextBox;
    Pages$Placeholder: pages.Placeholder;
    Pages$RadioButtonGroup: pages.RadioButtonGroup;
    Pages$RangeSearchField: pages.RangeSearchField;
    Pages$ReferenceSelector: pages.ReferenceSelector;
    Pages$ReferenceSetSelector: pages.ReferenceSetSelector;
    Pages$ReferenceSetSource: pages.ReferenceSetSource;
    Pages$RegularPageTemplateType: pages.RegularPageTemplateType;
    Pages$RetrievalQuery: pages.RetrievalQuery;
    Pages$RetrievalQueryParameter: pages.RetrievalQueryParameter;
    Pages$RetrievalSchema: pages.RetrievalSchema;
    Pages$RuntimeOperation: pages.RuntimeOperation;
    Pages$SaveButton: pages.SaveButton;
    Pages$SaveChangesClientAction: pages.SaveChangesClientAction;
    Pages$ScrollContainer: pages.ScrollContainer;
    Pages$ScrollContainerRegion: pages.ScrollContainerRegion;
    Pages$SearchBar: pages.SearchBar;
    Pages$SelectButton: pages.SelectButton;
    Pages$SelectPageTemplateType: pages.SelectPageTemplateType;
    Pages$SelectorDatabaseSource: pages.SelectorDatabaseSource;
    Pages$SelectorMicroflowSource: pages.SelectorMicroflowSource;
    Pages$SelectorXPathSource: pages.SelectorXPathSource;
    Pages$SetTaskOutcomeClientAction: pages.SetTaskOutcomeClientAction;
    Pages$SidebarToggleButton: pages.SidebarToggleButton;
    Pages$SignOutClientAction: pages.SignOutClientAction;
    Pages$SimpleMenuBar: pages.SimpleMenuBar;
    Pages$SnippetCall: pages.SnippetCall;
    Pages$SnippetCallWidget: pages.SnippetCallWidget;
    Pages$SnippetParameter: pages.SnippetParameter;
    Pages$SnippetParameterMapping: pages.SnippetParameterMapping;
    Pages$StaticImageViewer: pages.StaticImageViewer;
    Pages$StaticOrDynamicString: pages.StaticOrDynamicString;
    Pages$SyncButton: pages.SyncButton;
    Pages$SyncClientAction: pages.SyncClientAction;
    Pages$TabContainer: pages.TabContainer;
    Pages$TabPage: pages.TabPage;
    Pages$Table: pages.Table;
    Pages$TableCell: pages.TableCell;
    Pages$TableColumn: pages.TableColumn;
    Pages$TableRow: pages.TableRow;
    Pages$TemplateGrid: pages.TemplateGrid;
    Pages$TemplateGridContents: pages.TemplateGridContents;
    Pages$TemplatePlaceholder: pages.TemplatePlaceholder;
    Pages$TextArea: pages.TextArea;
    Pages$TextBox: pages.TextBox;
    Pages$Title: pages.Title;
    Pages$UserRoleSet: pages.UserRoleSet;
    Pages$UserTaskTemplateType: pages.UserTaskTemplateType;
    Pages$ValidationMessage: pages.ValidationMessage;
    Pages$VerticalFlow: pages.VerticalFlow;
    Pages$VerticalSplitPane: pages.VerticalSplitPane;
    Pages$WebLayoutContent: pages.WebLayoutContent;
    Pages$WidgetValidation: pages.WidgetValidation;
    Pages$WorkflowOverviewTemplateType: pages.WorkflowOverviewTemplateType;
    Projects$OneTimeConversionMarker: projects.OneTimeConversionMarker;
    Queues$BasicQueueConfig: queues.BasicQueueConfig;
    Queues$QueueExponentialRetry: queues.QueueExponentialRetry;
    Queues$QueueFixedRetry: queues.QueueFixedRetry;
    Queues$QueueSettings: queues.QueueSettings;
    Reports$BasicReport: reports.BasicReport;
    Reports$BasicReportAggregate: reports.BasicReportAggregate;
    Reports$BasicReportColumn: reports.BasicReportColumn;
    Reports$ReportButton: reports.ReportButton;
    Reports$ReportChart: reports.ReportChart;
    Reports$ReportChartSeries: reports.ReportChartSeries;
    Reports$ReportDateRangeField: reports.ReportDateRangeField;
    Reports$ReportDateRangeSelector: reports.ReportDateRangeSelector;
    Reports$ReportDropDown: reports.ReportDropDown;
    Reports$ReportPane: reports.ReportPane;
    Reports$ReportZoomInfo: reports.ReportZoomInfo;
    Reports$ReportZoomMapping: reports.ReportZoomMapping;
    Rest$CallMicroflowToChange: rest.CallMicroflowToChange;
    Rest$CallMicroflowToRead: rest.CallMicroflowToRead;
    Rest$ChangeNotSupported: rest.ChangeNotSupported;
    Rest$ChangeSource: rest.ChangeSource;
    Rest$CorsConfiguration: rest.CorsConfiguration;
    Rest$MetadataReference: rest.MetadataReference;
    Rest$ODataKey: rest.ODataKey;
    Rest$ODataKeyPart: rest.ODataKeyPart;
    Rest$ODataMappedValue: rest.ODataMappedValue;
    Rest$ODataRemoteAssociationSource: rest.ODataRemoteAssociationSource;
    Rest$ODataRemoteEntitySource: rest.ODataRemoteEntitySource;
    Rest$PublishedODataContract: rest.PublishedODataContract;
    Rest$PublishedODataEnumeration: rest.PublishedODataEnumeration;
    Rest$PublishedODataEnumerationValue: rest.PublishedODataEnumerationValue;
    Rest$PublishedODataMicroflow: rest.PublishedODataMicroflow;
    Rest$PublishedRestResource: rest.PublishedRestResource;
    Rest$PublishedRestServiceOperation: rest.PublishedRestServiceOperation;
    Rest$PublishedRestServiceResource: rest.PublishedRestServiceResource;
    Rest$QueryOptions: rest.QueryOptions;
    Rest$ReadSource: rest.ReadSource;
    Rest$RestOperationParameter: rest.RestOperationParameter;
    Rest$ServiceFeed: rest.ServiceFeed;
    ScheduledEvents$DaySchedule: scheduledevents.DaySchedule;
    ScheduledEvents$HourSchedule: scheduledevents.HourSchedule;
    ScheduledEvents$MinuteSchedule: scheduledevents.MinuteSchedule;
    ScheduledEvents$MonthDateSchedule: scheduledevents.MonthDateSchedule;
    ScheduledEvents$MonthWeekdaySchedule: scheduledevents.MonthWeekdaySchedule;
    ScheduledEvents$WeekSchedule: scheduledevents.WeekSchedule;
    ScheduledEvents$YearDateSchedule: scheduledevents.YearDateSchedule;
    ScheduledEvents$YearWeekdaySchedule: scheduledevents.YearWeekdaySchedule;
    Security$DemoUser: security.DemoUser;
    Security$FileDocumentAccessRuleContainer: security.FileDocumentAccessRuleContainer;
    Security$ImageAccessRuleContainer: security.ImageAccessRuleContainer;
    Security$ModuleRole: security.ModuleRole;
    Security$PasswordPolicySettings: security.PasswordPolicySettings;
    Security$UserRole: security.UserRole;
    Settings$ActionActivityDefaultColor: settings.ActionActivityDefaultColor;
    Settings$Certificate: settings.Certificate;
    Settings$CertificateSettings: settings.CertificateSettings;
    Settings$Configuration: settings.Configuration;
    Settings$ConfigurationSettings: settings.ConfigurationSettings;
    Settings$ConstantValue: settings.ConstantValue;
    Settings$CustomSetting: settings.CustomSetting;
    Settings$IntegrationProjectSettingsPart: settings.IntegrationProjectSettingsPart;
    Settings$JarDeploymentSettings: settings.JarDeploymentSettings;
    Settings$JavaActionsSettings: settings.JavaActionsSettings;
    Settings$Language: settings.Language;
    Settings$LanguageSettings: settings.LanguageSettings;
    Settings$ModelerSettings: settings.ModelerSettings;
    Settings$ProtectedModuleJarLocation: settings.ProtectedModuleJarLocation;
    Settings$RuntimeSettings: settings.RuntimeSettings;
    Settings$ThemeModuleEntry: settings.ThemeModuleEntry;
    Settings$UserLibJarLocation: settings.UserLibJarLocation;
    Settings$WebUIProjectSettingsPart: settings.WebUIProjectSettingsPart;
    Settings$WorkflowsProjectSettingsPart: settings.WorkflowsProjectSettingsPart;
    Texts$SystemText: texts.SystemText;
    Texts$Text: texts.Text;
    Texts$Translation: texts.Translation;
    WebServices$DataAssociation: webservices.DataAssociation;
    WebServices$DataAttribute: webservices.DataAttribute;
    WebServices$DataEntity: webservices.DataEntity;
    WebServices$OperationInfo: webservices.OperationInfo;
    WebServices$PartEncoding: webservices.PartEncoding;
    WebServices$PublishedOperation: webservices.PublishedOperation;
    WebServices$PublishedParameter: webservices.PublishedParameter;
    WebServices$RpcMessagePartElement: webservices.RpcMessagePartElement;
    WebServices$RpcOperationElement: webservices.RpcOperationElement;
    WebServices$ServiceInfo: webservices.ServiceInfo;
    WebServices$SystemIdDataAttribute: webservices.SystemIdDataAttribute;
    WebServices$VersionedService: webservices.VersionedService;
    WebServices$WsdlDescription: webservices.WsdlDescription;
    WebServices$WsdlEntry: webservices.WsdlEntry;
    Workflows$Annotation: workflows.Annotation;
    Workflows$BooleanConditionOutcome: workflows.BooleanConditionOutcome;
    Workflows$CallMicroflowTask: workflows.CallMicroflowTask;
    Workflows$CallWorkflowActivity: workflows.CallWorkflowActivity;
    Workflows$EmptyUserSource: workflows.EmptyUserSource;
    Workflows$EndWorkflowActivity: workflows.EndWorkflowActivity;
    Workflows$EnumerationValueConditionOutcome: workflows.EnumerationValueConditionOutcome;
    Workflows$ExclusiveSplitActivity: workflows.ExclusiveSplitActivity;
    Workflows$Flow: workflows.Flow;
    Workflows$JumpToActivity: workflows.JumpToActivity;
    Workflows$MicroflowBasedEvent: workflows.MicroflowBasedEvent;
    Workflows$MicroflowBasedUserSource: workflows.MicroflowBasedUserSource;
    Workflows$MicroflowCallParameterMapping: workflows.MicroflowCallParameterMapping;
    Workflows$MicroflowEventHandler: workflows.MicroflowEventHandler;
    Workflows$NoEvent: workflows.NoEvent;
    Workflows$PageParameterMapping: workflows.PageParameterMapping;
    Workflows$PageReference: workflows.PageReference;
    Workflows$ParallelSplitActivity: workflows.ParallelSplitActivity;
    Workflows$ParallelSplitOutcome: workflows.ParallelSplitOutcome;
    Workflows$Parameter: workflows.Parameter;
    Workflows$UserTask: workflows.UserTask;
    Workflows$UserTaskOutcome: workflows.UserTaskOutcome;
    Workflows$VoidConditionOutcome: workflows.VoidConditionOutcome;
    Workflows$WorkflowCallParameterMapping: workflows.WorkflowCallParameterMapping;
    Workflows$WorkflowType: workflows.WorkflowType;
    Workflows$XPathBasedUserSource: workflows.XPathBasedUserSource;
    XmlSchemas$XmlElement: xmlschemas.XmlElement;
    XmlSchemas$XmlSchemaEntry: xmlschemas.XmlSchemaEntry;
};
