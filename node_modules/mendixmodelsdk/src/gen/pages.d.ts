import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from "../common";
import { projects } from "./projects";
import { url } from "./url";
export declare namespace pages {
    class AggregateFunction extends internal.AbstractEnum {
        static None: AggregateFunction;
        static Average: AggregateFunction;
        static Maximum: AggregateFunction;
        static Minimum: AggregateFunction;
        static Sum: AggregateFunction;
        static Count: AggregateFunction;
        protected qualifiedTsTypeName: string;
    }
    class AlignmentEnum extends internal.AbstractEnum {
        static Left: AlignmentEnum;
        static Center: AlignmentEnum;
        static Right: AlignmentEnum;
        protected qualifiedTsTypeName: string;
    }
    class AutocompletePurposeType extends internal.AbstractEnum {
        static On: AutocompletePurposeType;
        static Off: AutocompletePurposeType;
        static FullName: AutocompletePurposeType;
        static HonorificPrefix: AutocompletePurposeType;
        static GivenName: AutocompletePurposeType;
        static AdditionalName: AutocompletePurposeType;
        static FamilyName: AutocompletePurposeType;
        static HonorificSuffix: AutocompletePurposeType;
        static Nickname: AutocompletePurposeType;
        static JobTitle: AutocompletePurposeType;
        static Username: AutocompletePurposeType;
        static NewPassword: AutocompletePurposeType;
        static CurrentPassword: AutocompletePurposeType;
        static CompanyName: AutocompletePurposeType;
        static StreetAddress: AutocompletePurposeType;
        static StreetAddressLine1: AutocompletePurposeType;
        static StreetAddressLine2: AutocompletePurposeType;
        static StreetAddressLine3: AutocompletePurposeType;
        static AddressLevel4: AutocompletePurposeType;
        static AddressLevel3: AutocompletePurposeType;
        static AddressLevel2: AutocompletePurposeType;
        static AddressLevel1: AutocompletePurposeType;
        static CountryCode: AutocompletePurposeType;
        static CountryName: AutocompletePurposeType;
        static PostalCode: AutocompletePurposeType;
        static CreditCardFullName: AutocompletePurposeType;
        static CreditCardGivenName: AutocompletePurposeType;
        static CreditCardAdditionalName: AutocompletePurposeType;
        static CreditCardFamilyName: AutocompletePurposeType;
        static CreditCardNumber: AutocompletePurposeType;
        static CreditCardExpiration: AutocompletePurposeType;
        static CreditCardExpirationMonth: AutocompletePurposeType;
        static CreditCardExpirationYear: AutocompletePurposeType;
        static CreditCardSecurityCode: AutocompletePurposeType;
        static CreditCardType: AutocompletePurposeType;
        static TransactionCurrency: AutocompletePurposeType;
        static TransactionAmount: AutocompletePurposeType;
        static Language: AutocompletePurposeType;
        static Birthday: AutocompletePurposeType;
        static DayOfBirth: AutocompletePurposeType;
        static MonthOfBirth: AutocompletePurposeType;
        static YearOfBirth: AutocompletePurposeType;
        static Sex: AutocompletePurposeType;
        static Url: AutocompletePurposeType;
        static Photo: AutocompletePurposeType;
        static TelephoneNumber: AutocompletePurposeType;
        static TelephoneCountryCode: AutocompletePurposeType;
        static TelephoneWithoutCountryCode: AutocompletePurposeType;
        static TelephoneAreaCode: AutocompletePurposeType;
        static TelephoneLocal: AutocompletePurposeType;
        static TelephoneLocalPrefix: AutocompletePurposeType;
        static TelephoneLocalSuffix: AutocompletePurposeType;
        static TelephoneExtension: AutocompletePurposeType;
        static Email: AutocompletePurposeType;
        static InstantMessageProtocol: AutocompletePurposeType;
        protected qualifiedTsTypeName: string;
    }
    class ButtonAriaRoleType extends internal.AbstractEnum {
        static Button: ButtonAriaRoleType;
        static Link: ButtonAriaRoleType;
        static Checkbox: ButtonAriaRoleType;
        static Radio: ButtonAriaRoleType;
        static Tab: ButtonAriaRoleType;
        static MenuItem: ButtonAriaRoleType;
        static MenuItemCheckbox: ButtonAriaRoleType;
        static MenuItemRadio: ButtonAriaRoleType;
        static Option: ButtonAriaRoleType;
        static Switch: ButtonAriaRoleType;
        static TreeItem: ButtonAriaRoleType;
        protected qualifiedTsTypeName: string;
    }
    class ButtonStyle extends internal.AbstractEnum {
        static Default: ButtonStyle;
        static Inverse: ButtonStyle;
        static Primary: ButtonStyle;
        static Info: ButtonStyle;
        static Success: ButtonStyle;
        static Warning: ButtonStyle;
        static Danger: ButtonStyle;
        protected qualifiedTsTypeName: string;
    }
    class ClickTypeType extends internal.AbstractEnum {
        static Single: ClickTypeType;
        static Double: ClickTypeType;
        protected qualifiedTsTypeName: string;
    }
    class ContainerRenderMode extends internal.AbstractEnum {
        static Div: ContainerRenderMode;
        static Section: ContainerRenderMode;
        static Article: ContainerRenderMode;
        static Header: ContainerRenderMode;
        static Footer: ContainerRenderMode;
        static Main: ContainerRenderMode;
        static Nav: ContainerRenderMode;
        static Aside: ContainerRenderMode;
        static Hgroup: ContainerRenderMode;
        static Address: ContainerRenderMode;
        protected qualifiedTsTypeName: string;
    }
    class ContainerWidth extends internal.AbstractEnum {
        static FullWidth: ContainerWidth;
        static FixedWidth: ContainerWidth;
        protected qualifiedTsTypeName: string;
    }
    class DataViewReadOnlyStyle extends internal.AbstractEnum {
        static Control: DataViewReadOnlyStyle;
        static Text: DataViewReadOnlyStyle;
        protected qualifiedTsTypeName: string;
    }
    class DatabaseConstraintOperator extends internal.AbstractEnum {
        static Equals: DatabaseConstraintOperator;
        static NotEquals: DatabaseConstraintOperator;
        static Contains: DatabaseConstraintOperator;
        static NotContains: DatabaseConstraintOperator;
        static LessThan: DatabaseConstraintOperator;
        static LessThanOrEquals: DatabaseConstraintOperator;
        static GreaterThan: DatabaseConstraintOperator;
        static GreaterThanOrEquals: DatabaseConstraintOperator;
        protected qualifiedTsTypeName: string;
    }
    class DateFormat extends internal.AbstractEnum {
        static Date: DateFormat;
        static Time: DateFormat;
        static DateTime: DateFormat;
        static Custom: DateFormat;
        protected qualifiedTsTypeName: string;
    }
    class DesignPropertyValueType extends internal.AbstractEnum {
        static DropDown: DesignPropertyValueType;
        static Toggle: DesignPropertyValueType;
        static Spacing: DesignPropertyValueType;
        static ColorPicker: DesignPropertyValueType;
        static ToggleButtonGroup: DesignPropertyValueType;
        protected qualifiedTsTypeName: string;
    }
    class EditableEnum extends internal.AbstractEnum {
        static Always: EditableEnum;
        static Never: EditableEnum;
        static Conditional: EditableEnum;
        protected qualifiedTsTypeName: string;
    }
    class EnumFormat extends internal.AbstractEnum {
        static Text: EnumFormat;
        static Image: EnumFormat;
        protected qualifiedTsTypeName: string;
    }
    class FileManagerType extends internal.AbstractEnum {
        static Upload: FileManagerType;
        static Download: FileManagerType;
        static Both: FileManagerType;
        protected qualifiedTsTypeName: string;
    }
    class FormLocation extends internal.AbstractEnum {
        static Content: FormLocation;
        static Popup: FormLocation;
        static ModalPopup: FormLocation;
        protected qualifiedTsTypeName: string;
    }
    class FormValidations extends internal.AbstractEnum {
        static None: FormValidations;
        static Widget: FormValidations;
        static All: FormValidations;
        protected qualifiedTsTypeName: string;
    }
    class GridSelectionMode extends internal.AbstractEnum {
        static None: GridSelectionMode;
        static Single: GridSelectionMode;
        static SingleAndMaintain: GridSelectionMode;
        static Multi: GridSelectionMode;
        static SimpleMulti: GridSelectionMode;
        protected qualifiedTsTypeName: string;
    }
    class GroupBoxCollapsible extends internal.AbstractEnum {
        static No: GroupBoxCollapsible;
        static YesInitiallyExpanded: GroupBoxCollapsible;
        static YesInitiallyCollapsed: GroupBoxCollapsible;
        protected qualifiedTsTypeName: string;
    }
    class GroupBoxRenderMode extends internal.AbstractEnum {
        static Div: GroupBoxRenderMode;
        static H1: GroupBoxRenderMode;
        static H2: GroupBoxRenderMode;
        static H3: GroupBoxRenderMode;
        static H4: GroupBoxRenderMode;
        static H5: GroupBoxRenderMode;
        static H6: GroupBoxRenderMode;
        protected qualifiedTsTypeName: string;
    }
    class ImageSizeUnit extends internal.AbstractEnum {
        static Auto: ImageSizeUnit;
        static Pixels: ImageSizeUnit;
        static Percentage: ImageSizeUnit;
        protected qualifiedTsTypeName: string;
    }
    class KeyboardType extends internal.AbstractEnum {
        static NumberPad: KeyboardType;
        static DecimalPad: KeyboardType;
        static EmailAddress: KeyboardType;
        static PhonePad: KeyboardType;
        static URL: KeyboardType;
        static Default: KeyboardType;
        protected qualifiedTsTypeName: string;
    }
    class LabelPosition extends internal.AbstractEnum {
        static Default: LabelPosition;
        static BeforeControl: LabelPosition;
        static AfterControl: LabelPosition;
        protected qualifiedTsTypeName: string;
    }
    class LayoutGridAlignment extends internal.AbstractEnum {
        static None: LayoutGridAlignment;
        static Start: LayoutGridAlignment;
        static Center: LayoutGridAlignment;
        static End: LayoutGridAlignment;
        protected qualifiedTsTypeName: string;
    }
    class LayoutModeType extends internal.AbstractEnum {
        static Headline: LayoutModeType;
        static Sidebar: LayoutModeType;
        protected qualifiedTsTypeName: string;
    }
    class LayoutType extends internal.AbstractEnum {
        static Responsive: LayoutType;
        static Tablet: LayoutType;
        static Phone: LayoutType;
        static ModalPopup: LayoutType;
        static Popup: LayoutType;
        static Legacy: LayoutType;
        protected qualifiedTsTypeName: string;
    }
    class LinkType extends internal.AbstractEnum {
        static Web: LinkType;
        static Email: LinkType;
        static Call: LinkType;
        static Text: LinkType;
        protected qualifiedTsTypeName: string;
    }
    class MobileFooterType extends internal.AbstractEnum {
        static None: MobileFooterType;
        static MenuBar: MobileFooterType;
        static Custom: MobileFooterType;
        protected qualifiedTsTypeName: string;
    }
    class NativeLayoutType extends internal.AbstractEnum {
        static Default: NativeLayoutType;
        static TopLevel: NativeLayoutType;
        static Popup: NativeLayoutType;
        protected qualifiedTsTypeName: string;
    }
    class NativeRenderMode extends internal.AbstractEnum {
        static CheckBox: NativeRenderMode;
        static Switch: NativeRenderMode;
        protected qualifiedTsTypeName: string;
    }
    class NativeTextStyle extends internal.AbstractEnum {
        static Text: NativeTextStyle;
        static Heading1: NativeTextStyle;
        static Heading2: NativeTextStyle;
        static Heading3: NativeTextStyle;
        static Heading4: NativeTextStyle;
        static Heading5: NativeTextStyle;
        static Heading6: NativeTextStyle;
        protected qualifiedTsTypeName: string;
    }
    class NewButtonEditLocation extends internal.AbstractEnum {
        static InlineAtTop: NewButtonEditLocation;
        static InlineAtBottom: NewButtonEditLocation;
        static Form: NewButtonEditLocation;
        protected qualifiedTsTypeName: string;
    }
    class PageTemplateType extends internal.AbstractEnum {
        static Standard: PageTemplateType;
        static Edit: PageTemplateType;
        static Select: PageTemplateType;
        protected qualifiedTsTypeName: string;
    }
    class ProgressBarType extends internal.AbstractEnum {
        static None: ProgressBarType;
        static NonBlocking: ProgressBarType;
        static Blocking: ProgressBarType;
        protected qualifiedTsTypeName: string;
    }
    class ReadOnlyStyle extends internal.AbstractEnum {
        static Inherit: ReadOnlyStyle;
        static Control: ReadOnlyStyle;
        static Text: ReadOnlyStyle;
        protected qualifiedTsTypeName: string;
    }
    class ReferenceSelectorRenderModeType extends internal.AbstractEnum {
        static Form: ReferenceSelectorRenderModeType;
        static DropDown: ReferenceSelectorRenderModeType;
        protected qualifiedTsTypeName: string;
    }
    class RenderType extends internal.AbstractEnum {
        static Button: RenderType;
        static Link: RenderType;
        protected qualifiedTsTypeName: string;
    }
    class ScrollBehavior extends internal.AbstractEnum {
        static PerRegion: ScrollBehavior;
        static FullWidget: ScrollBehavior;
        protected qualifiedTsTypeName: string;
    }
    class ScrollDirection extends internal.AbstractEnum {
        static Vertical: ScrollDirection;
        static Horizontal: ScrollDirection;
        protected qualifiedTsTypeName: string;
    }
    class SearchBarTypeEnum extends internal.AbstractEnum {
        static None: SearchBarTypeEnum;
        static FoldableOpen: SearchBarTypeEnum;
        static FoldableClosed: SearchBarTypeEnum;
        static AlwaysOpen: SearchBarTypeEnum;
        protected qualifiedTsTypeName: string;
    }
    class SearchFieldOperator extends internal.AbstractEnum {
        static Contains: SearchFieldOperator;
        static StartsWith: SearchFieldOperator;
        static Greater: SearchFieldOperator;
        static GreaterOrEqual: SearchFieldOperator;
        static Equal: SearchFieldOperator;
        static NotEqual: SearchFieldOperator;
        static SmallerOrEqual: SearchFieldOperator;
        static Smaller: SearchFieldOperator;
        protected qualifiedTsTypeName: string;
    }
    class SearchFieldType extends internal.AbstractEnum {
        static Normal: SearchFieldType;
        static Hidden: SearchFieldType;
        static ReadOnly: SearchFieldType;
        protected qualifiedTsTypeName: string;
    }
    class SelectionType extends internal.AbstractEnum {
        static SelectPage: SelectionType;
        static SelectAll: SelectionType;
        protected qualifiedTsTypeName: string;
    }
    class ShowPagingBarType extends internal.AbstractEnum {
        static YesWithTotalCount: ShowPagingBarType;
        static YesWithoutTotalCount: ShowPagingBarType;
        static No: ShowPagingBarType;
        protected qualifiedTsTypeName: string;
    }
    class SidebarToggleMode extends internal.AbstractEnum {
        static PushContentAside: SidebarToggleMode;
        static SlideOverContent: SidebarToggleMode;
        static ShrinkContent: SidebarToggleMode;
        protected qualifiedTsTypeName: string;
    }
    class SidebarToggleRegion extends internal.AbstractEnum {
        static Left: SidebarToggleRegion;
        static Right: SidebarToggleRegion;
        protected qualifiedTsTypeName: string;
    }
    class SimpleMenuBarOrientation extends internal.AbstractEnum {
        static Horizontal: SimpleMenuBarOrientation;
        static Vertical: SimpleMenuBarOrientation;
        protected qualifiedTsTypeName: string;
    }
    class SizeMode extends internal.AbstractEnum {
        static Auto: SizeMode;
        static Pixels: SizeMode;
        static Percentage: SizeMode;
        protected qualifiedTsTypeName: string;
    }
    class SnippetType extends internal.AbstractEnum {
        static Web: SnippetType;
        static Native: SnippetType;
        protected qualifiedTsTypeName: string;
    }
    class SortDirection extends internal.AbstractEnum {
        static Ascending: SortDirection;
        static Descending: SortDirection;
        protected qualifiedTsTypeName: string;
    }
    class SubmitBehaviourType extends internal.AbstractEnum {
        static OnEndEditing: SubmitBehaviourType;
        static WhileEditing: SubmitBehaviourType;
        protected qualifiedTsTypeName: string;
    }
    class TableCellRenderModeType extends internal.AbstractEnum {
        static Default: TableCellRenderModeType;
        static Header: TableCellRenderModeType;
        static Title: TableCellRenderModeType;
        protected qualifiedTsTypeName: string;
    }
    class TextRenderMode extends internal.AbstractEnum {
        static Text: TextRenderMode;
        static Paragraph: TextRenderMode;
        static H1: TextRenderMode;
        static H2: TextRenderMode;
        static H3: TextRenderMode;
        static H4: TextRenderMode;
        static H5: TextRenderMode;
        static H6: TextRenderMode;
        protected qualifiedTsTypeName: string;
    }
    class ToggleMode extends internal.AbstractEnum {
        static None: ToggleMode;
        static PushContentAside: ToggleMode;
        static SlideOverContent: ToggleMode;
        static ShrinkContentInitiallyOpen: ToggleMode;
        static ShrinkContentInitiallyClosed: ToggleMode;
        protected qualifiedTsTypeName: string;
    }
    class UnitEnum extends internal.AbstractEnum {
        static Weight: UnitEnum;
        static Pixels: UnitEnum;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Pages`.
     */
    /**
     * In version 10.2.0: introduced
     */
    abstract class AbstractDesignPropertyValue extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDesignPropertyValue(): DesignPropertyValue;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 9.22.0: introduced
     */
    class AccessibilitySettings extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsActionButton(): ActionButton;
        get containerAsCheckBox(): CheckBox;
        get containerAsConditionallyVisibleWidget(): ConditionallyVisibleWidget;
        get containerAsDatePicker(): DatePicker;
        get containerAsDivContainer(): DivContainer;
        get containerAsDropDown(): DropDown;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsDynamicText(): DynamicText;
        get containerAsReferenceSelector(): ReferenceSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextArea(): TextArea;
        get containerAsTextBox(): TextBox;
        get containerAsTitle(): Title;
        get screenReaderDescription(): ClientTemplate;
        set screenReaderDescription(newValue: ClientTemplate);
        get screenReaderTitle(): ClientTemplate;
        set screenReaderTitle(newValue: ClientTemplate);
        /**
         * In version 9.24.0: deleted
         */
        get accessible(): boolean;
        set accessible(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'accessibilitySettings' property
         * of the parent ConditionallyVisibleWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.22.0 to 9.23.0
         */
        static createIn(container: ConditionallyVisibleWidget): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInActionButtonUnderNativeAccessibilitySettings(container: ActionButton): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent CheckBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInCheckBoxUnderNativeAccessibilitySettings(container: CheckBox): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'accessibilitySettings' property
         * of the parent ConditionallyVisibleWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.22.0 to 9.23.0
         */
        static createInConditionallyVisibleWidgetUnderAccessibilitySettings(container: ConditionallyVisibleWidget): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent DatePicker element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInDatePickerUnderNativeAccessibilitySettings(container: DatePicker): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInDivContainerUnderNativeAccessibilitySettings(container: DivContainer): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent DropDown element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInDropDownUnderNativeAccessibilitySettings(container: DropDown): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInDynamicImageViewerUnderNativeAccessibilitySettings(container: DynamicImageViewer): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent DynamicText element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInDynamicTextUnderNativeAccessibilitySettings(container: DynamicText): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent ReferenceSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInReferenceSelectorUnderNativeAccessibilitySettings(container: ReferenceSelector): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInStaticImageViewerUnderNativeAccessibilitySettings(container: StaticImageViewer): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent TextArea element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInTextAreaUnderNativeAccessibilitySettings(container: TextArea): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInTextBoxUnderNativeAccessibilitySettings(container: TextBox): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * The new AccessibilitySettings will be automatically stored in the 'nativeAccessibilitySettings' property
         * of the parent Title element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInTitleUnderNativeAccessibilitySettings(container: Title): AccessibilitySettings;
        /**
         * Creates and returns a new AccessibilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): AccessibilitySettings;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/pages relevant section in reference guide}
     */
    abstract class Widget extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get name(): string;
        set name(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        get tabIndex(): number;
        set tabIndex(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class ConditionallyVisibleWidget extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get conditionalVisibilitySettings(): ConditionalVisibilitySettings | null;
        set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings | null);
        /**
         * In version 9.24.0: deleted
         * In version 9.22.0: introduced
         */
        get accessibilitySettings(): AccessibilitySettings | null;
        set accessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/button-widgets relevant section in reference guide}
     */
    abstract class Button extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get caption(): ClientTemplate;
        set caption(newValue: ClientTemplate);
        get tooltip(): texts.Text;
        set tooltip(newValue: texts.Text);
        get icon(): Icon | null;
        set icon(newValue: Icon | null);
        get renderType(): RenderType;
        set renderType(newValue: RenderType);
        get buttonStyle(): ButtonStyle;
        set buttonStyle(newValue: ButtonStyle);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/button-widgets relevant section in reference guide}
     */
    class ActionButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get action(): ClientAction;
        set action(newValue: ClientAction);
        /**
         * In version 9.0.1: introduced
         */
        get ariaRole(): ButtonAriaRoleType;
        set ariaRole(newValue: ButtonAriaRoleType);
        /**
         * In version 8.12.0: deleted
         */
        get disabledDuringAction(): boolean;
        set disabledDuringAction(newValue: boolean);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ActionButton;
    }
    abstract class ActionItem extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDropDownButton(): DropDownButton;
        get containerAsNavigationList(): NavigationList;
        get action(): ClientAction;
        set action(newValue: ClientAction);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 8.0.0: introduced
     */
    class Appearance extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBarButton(): ControlBarButton;
        get containerAsGridColumn(): GridColumn;
        get containerAsLayout(): Layout;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsLayoutGridRow(): LayoutGridRow;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsPage(): Page;
        get containerAsPageTemplate(): PageTemplate;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsTableCell(): TableCell;
        get containerAsTableRow(): TableRow;
        get containerAsWidget(): Widget;
        get class(): string;
        set class(newValue: string);
        get style(): string;
        set style(newValue: string);
        get designProperties(): internal.IList<DesignPropertyValue>;
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 8.13.0: introduced
         */
        get dynamicClasses(): string;
        set dynamicClasses(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent ControlBarButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInControlBarButtonUnderAppearance(container: ControlBarButton): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent GridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInGridColumnUnderAppearance(container: GridColumn): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInLayoutUnderAppearance(container: Layout): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInLayoutGridColumnUnderAppearance(container: LayoutGridColumn): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent LayoutGridRow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInLayoutGridRowUnderAppearance(container: LayoutGridRow): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNavigationListItemUnderAppearance(container: NavigationListItem): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent Page element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInPageUnderAppearance(container: Page): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInPageTemplateUnderAppearance(container: PageTemplate): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInScrollContainerRegionUnderAppearance(container: ScrollContainerRegion): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInTableCellUnderAppearance(container: TableCell): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent TableRow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInTableRowUnderAppearance(container: TableRow): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * The new Appearance will be automatically stored in the 'appearance' property
         * of the parent Widget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWidgetUnderAppearance(container: Widget): Appearance;
        /**
         * Creates and returns a new Appearance instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Appearance;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/data-sources relevant section in reference guide}
     */
    abstract class DataSource extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class EntityPathSource extends DataSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         */
        get entityPath(): string;
        set entityPath(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get entityRef(): domainmodels.EntityRef | null;
        set entityRef(newValue: domainmodels.EntityRef | null);
        /**
         * In version 10.0.0: introduced
         */
        get sourceVariable(): PageVariable | null;
        set sourceVariable(newValue: PageVariable | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    class AssociationSource extends EntityPathSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * The new AssociationSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): AssociationSource;
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * The new AssociationSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): AssociationSource;
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * The new AssociationSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): AssociationSource;
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): AssociationSource;
    }
    abstract class ConditionallyEditableWidget extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get conditionalEditabilitySettings(): ConditionalEditabilitySettings | null;
        set conditionalEditabilitySettings(newValue: ConditionalEditabilitySettings | null);
        get editable(): EditableEnum;
        set editable(newValue: EditableEnum);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class InputWidget extends ConditionallyEditableWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.18.0: deleted
         */
        get label(): texts.Text | null;
        set label(newValue: texts.Text | null);
        /**
         * In version 7.18.0: introduced
         */
        get labelTemplate(): ClientTemplate | null;
        set labelTemplate(newValue: ClientTemplate | null);
        /**
         * In version 8.12.0: introduced
         */
        get screenReaderLabel(): ClientTemplate | null;
        set screenReaderLabel(newValue: ClientTemplate | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class MemberWidget extends InputWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath(): string;
        set attributePath(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef(): domainmodels.AttributeRef | null;
        set attributeRef(newValue: domainmodels.AttributeRef | null);
        /**
         * In version 6.9.0: introduced
         */
        get readOnlyStyle(): ReadOnlyStyle;
        set readOnlyStyle(newValue: ReadOnlyStyle);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class AssociationWidget extends MemberWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get selectorSource(): SelectorSource;
        set selectorSource(newValue: SelectorSource);
        get selectPageSettings(): PageSettings;
        set selectPageSettings(newValue: PageSettings);
        /**
         * In version 7.13.0: deleted
         */
        get onChangeMicroflowSettings(): MicroflowSettings;
        set onChangeMicroflowSettings(newValue: MicroflowSettings);
        /**
         * In version 7.13.0: introduced
         */
        get onChangeAction(): ClientAction;
        set onChangeAction(newValue: ClientAction);
        /**
         * In version 9.24.0: introduced
         */
        get sourceVariable(): PageVariable | null;
        set sourceVariable(newValue: PageVariable | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class AttributeWidget extends MemberWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.6.0: deleted
         */
        get required(): boolean;
        set required(newValue: boolean);
        /**
         * In version 7.6.0: deleted
         */
        get requiredMessage(): texts.Text;
        set requiredMessage(newValue: texts.Text);
        /**
         * In version 7.6.0: introduced
         */
        get validation(): WidgetValidation;
        set validation(newValue: WidgetValidation);
        /**
         * In version 7.13.0: deleted
         */
        get onChangeMicroflowSettings(): MicroflowSettings;
        set onChangeMicroflowSettings(newValue: MicroflowSettings);
        /**
         * In version 7.13.0: deleted
         */
        get onEnterMicroflowSettings(): MicroflowSettings;
        set onEnterMicroflowSettings(newValue: MicroflowSettings);
        /**
         * In version 7.13.0: deleted
         */
        get onLeaveMicroflowSettings(): MicroflowSettings;
        set onLeaveMicroflowSettings(newValue: MicroflowSettings);
        /**
         * In version 7.13.0: introduced
         */
        get onChangeAction(): ClientAction;
        set onChangeAction(newValue: ClientAction);
        /**
         * In version 7.13.0: introduced
         */
        get onEnterAction(): ClientAction;
        set onEnterAction(newValue: ClientAction);
        /**
         * In version 7.13.0: introduced
         */
        get onLeaveAction(): ClientAction;
        set onLeaveAction(newValue: ClientAction);
        /**
         * In version 8.8.0: introduced
         */
        get sourceVariable(): PageVariable | null;
        set sourceVariable(newValue: PageVariable | null);
        /**
         * In version 9.2.0: introduced
         */
        get ariaRequired(): boolean;
        set ariaRequired(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class AttributeWidgetWithPlaceholder extends AttributeWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get placeholder(): texts.Text;
        set placeholder(newValue: texts.Text);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/close-page-button relevant section in reference guide}
     *
     * In version 7.0.2: deleted
     */
    class BackButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container: DataView): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container: DivContainer): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container: GroupBox): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container: Header): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container: Header): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container: Layout): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container: ListView): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container: Snippet): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container: TabPage): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container: TableCell): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): BackButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/pages relevant section in reference guide}
     */
    interface IFormBase extends projects.IDocument {
        readonly model: IModel;
        readonly containerAsFolderBase: projects.IFolderBase;
        asLoaded(): FormBase;
        load(callback: (element: FormBase) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<FormBase>;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/pages relevant section in reference guide}
     */
    abstract class FormBase extends projects.Document implements IFormBase {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsFolderBase(): projects.FolderBase;
        get canvasWidth(): number;
        set canvasWidth(newValue: number);
        get canvasHeight(): number;
        set canvasHeight(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
    }
    /**
     * In version 7.7.0: introduced
     */
    interface ITemplateFormBase extends IFormBase {
        readonly model: IModel;
        readonly containerAsFolderBase: projects.IFolderBase;
        /**
         * In version 7.17.0: added public
         */
        readonly displayName: string;
        /**
         * In version 7.17.0: introduced
         */
        readonly documentationUrl: string;
        /**
         * In version 9.0.2: introduced
         */
        readonly templateCategory: string;
        /**
         * In version 9.0.2: introduced
         */
        readonly templateCategoryWeight: number;
        asLoaded(): TemplateFormBase;
        load(callback: (element: TemplateFormBase) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<TemplateFormBase>;
    }
    /**
     * In version 7.7.0: introduced
     */
    abstract class TemplateFormBase extends FormBase implements ITemplateFormBase {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsFolderBase(): projects.FolderBase;
        /**
         * In version 7.17.0: added public
         */
        get displayName(): string;
        set displayName(newValue: string);
        /**
         * In version 7.17.0: introduced
         */
        get documentationUrl(): string;
        set documentationUrl(newValue: string);
        /**
         * In version 9.0.2: introduced
         */
        get templateCategory(): string;
        set templateCategory(newValue: string);
        /**
         * In version 9.0.2: introduced
         */
        get templateCategoryWeight(): number;
        set templateCategoryWeight(newValue: number);
        get imageData(): string | null;
        set imageData(newValue: string | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/building-block relevant section in reference guide}
     *
     * In version 7.7.0: introduced
     */
    interface IBuildingBlock extends ITemplateFormBase {
        readonly model: IModel;
        readonly containerAsFolderBase: projects.IFolderBase;
        /**
         * In version 8.4.0: added public
         * In version 8.3.0: introduced
         */
        readonly platform: SnippetType;
        asLoaded(): BuildingBlock;
        load(callback: (element: BuildingBlock) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<BuildingBlock>;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/building-block relevant section in reference guide}
     *
     * In version 7.7.0: introduced
     */
    class BuildingBlock extends TemplateFormBase implements IBuildingBlock {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsFolderBase(): projects.FolderBase;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 8.4.0: added public
         * In version 8.3.0: introduced
         */
        get platform(): SnippetType;
        set platform(newValue: SnippetType);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new BuildingBlock unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): BuildingBlock;
    }
    abstract class ClientAction extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDataViewActionButton(): DataViewActionButton;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        /**
         * In version 8.12.0: introduced
         */
        get disabledDuringExecution(): boolean;
        set disabledDuringExecution(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 7.12.0: removed experimental
     * In version 7.8.0: introduced
     */
    class CallNanoflowClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        /**
         * In version 7.10.0: introduced
         */
        get nanoflow(): microflows.INanoflow | null;
        set nanoflow(newValue: microflows.INanoflow | null);
        get nanoflowQualifiedName(): string | null;
        /**
         * In version 7.19.0: introduced
         */
        get parameterMappings(): internal.IList<NanoflowParameterMapping>;
        get progressBar(): ProgressBarType;
        set progressBar(newValue: ProgressBarType);
        get progressMessage(): texts.Text | null;
        set progressMessage(newValue: texts.Text | null);
        get confirmationInfo(): ConfirmationInfo | null;
        set confirmationInfo(newValue: ConfirmationInfo | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInListViewUnderClickAction(container: ListView): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * The new CallNanoflowClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): CallNanoflowClientAction;
        /**
         * Creates and returns a new CallNanoflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CallNanoflowClientAction;
    }
    /**
     * In version 9.0.5: removed experimental
     * In version 9.0.2: introduced
     */
    class CallWorkflowClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get workflow(): workflows.IWorkflow | null;
        set workflow(newValue: workflows.IWorkflow | null);
        get workflowQualifiedName(): string | null;
        get closePage(): boolean;
        set closePage(newValue: boolean);
        /**
         * In version 9.12.0: deleted
         */
        get commit(): boolean;
        set commit(newValue: boolean);
        /**
         * In version 9.12.0: introduced
         */
        get confirmationInfo(): ConfirmationInfo | null;
        set confirmationInfo(newValue: ConfirmationInfo | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * The new CallWorkflowClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): CallWorkflowClientAction;
        /**
         * Creates and returns a new CallWorkflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CallWorkflowClientAction;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/cancel-button relevant section in reference guide}
     *
     * In version 7.0.2: deleted
     */
    class CancelButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 6.7.0: introduced
         */
        get closePage(): boolean;
        set closePage(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container: DataView): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container: DivContainer): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container: GroupBox): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container: Header): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container: Header): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container: Layout): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container: ListView): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container: Snippet): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container: TabPage): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container: TableCell): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CancelButton;
    }
    /**
     * In version 7.0.2: introduced
     */
    class CancelChangesClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get closePage(): boolean;
        set closePage(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * The new CancelChangesClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): CancelChangesClientAction;
        /**
         * Creates and returns a new CancelChangesClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CancelChangesClientAction;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/check-box relevant section in reference guide}
     */
    class CheckBox extends AttributeWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 8.0.0: introduced
         */
        get labelPosition(): LabelPosition;
        set labelPosition(newValue: LabelPosition);
        /**
         * In version 9.8.0: introduced
         */
        get nativeRenderMode(): NativeRenderMode;
        set nativeRenderMode(newValue: NativeRenderMode);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CheckBox;
    }
    class ClientTemplate extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsCustomWidget(): customwidgets.CustomWidget;
        get containerAsWidgetObject(): customwidgets.WidgetObject;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsAccessibilitySettings(): AccessibilitySettings;
        get containerAsButton(): Button;
        get containerAsControlBarButton(): ControlBarButton;
        get containerAsDataGrid(): DataGrid;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsDynamicText(): DynamicText;
        get containerAsGroupBox(): GroupBox;
        get containerAsInputWidget(): InputWidget;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTabPage(): TabPage;
        get template(): texts.Text;
        set template(newValue: texts.Text);
        get parameters(): internal.IList<ClientTemplateParameter>;
        /**
         * In version 8.3.0: introduced
         */
        get fallback(): texts.Text;
        set fallback(newValue: texts.Text);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'labelTemplate' property
         * of the parent customwidgets.CustomWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.1.0 and higher
         */
        static createInCustomWidgetUnderLabelTemplate(container: customwidgets.CustomWidget): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'labelTemplate' property
         * of the parent customwidgets.WidgetObject element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 8.0.0
         */
        static createInWidgetObjectUnderLabelTemplate(container: customwidgets.WidgetObject): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'textTemplate' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 and higher
         */
        static createInWidgetValueUnderTextTemplate(container: customwidgets.WidgetValue): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'screenReaderDescription' property
         * of the parent AccessibilitySettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.22.0 and higher
         */
        static createInAccessibilitySettingsUnderScreenReaderDescription(container: AccessibilitySettings): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'screenReaderTitle' property
         * of the parent AccessibilitySettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.22.0 and higher
         */
        static createInAccessibilitySettingsUnderScreenReaderTitle(container: AccessibilitySettings): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderCaption(container: Button): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderCaption(container: ControlBarButton): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent DataGrid element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInDataGridUnderCaption(container: DataGrid): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'alternativeText' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.6.0 and higher
         */
        static createInDynamicImageViewerUnderAlternativeText(container: DynamicImageViewer): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'content' property
         * of the parent DynamicText element passed as argument.
         */
        static createInDynamicTextUnderContent(container: DynamicText): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderCaption(container: GroupBox): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'labelTemplate' property
         * of the parent InputWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInInputWidgetUnderLabelTemplate(container: InputWidget): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'screenReaderLabel' property
         * of the parent InputWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.12.0 and higher
         */
        static createInInputWidgetUnderScreenReaderLabel(container: InputWidget): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'alternativeText' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.6.0 and higher
         */
        static createInStaticImageViewerUnderAlternativeText(container: StaticImageViewer): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'badge' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInTabPageUnderBadge(container: TabPage): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ClientTemplate;
    }
    class ClientTemplateParameter extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsClientTemplate(): ClientTemplate;
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath(): string;
        set attributePath(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef(): domainmodels.AttributeRef | null;
        set attributeRef(newValue: domainmodels.AttributeRef | null);
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 9.0.1: introduced
         */
        get expression(): string;
        set expression(newValue: string);
        /**
         * In version 7.15.0: introduced
         */
        get formattingInfo(): FormattingInfo;
        set formattingInfo(newValue: FormattingInfo);
        /**
         * In version 9.24.0: introduced
         */
        get sourceVariable(): PageVariable | null;
        set sourceVariable(newValue: PageVariable | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * The new ClientTemplateParameter will be automatically stored in the 'parameters' property
         * of the parent ClientTemplate element passed as argument.
         */
        static createIn(container: ClientTemplate): ClientTemplateParameter;
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ClientTemplateParameter;
    }
    /**
     * In version 7.0.2: introduced
     */
    class ClosePageClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        /**
         * In version 8.14.0: deleted
         * In version 8.9.0: introduced
         */
        get numberOfPages(): number;
        set numberOfPages(newValue: number);
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 8.14.0: introduced
         */
        get numberOfPagesToClose(): string;
        set numberOfPagesToClose(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * The new ClosePageClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): ClosePageClientAction;
        /**
         * Creates and returns a new ClosePageClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ClosePageClientAction;
    }
    abstract class EntityWidget extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get dataSource(): DataSource;
        set dataSource(newValue: DataSource);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class ListenTargetWidget extends EntityWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class Grid extends ListenTargetWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get isControlBarVisible(): boolean;
        set isControlBarVisible(newValue: boolean);
        /**
         * In version 8.13.0: deleted
         */
        get isPagingEnabled(): boolean;
        set isPagingEnabled(newValue: boolean);
        /**
         * In version 8.13.0: introduced
         */
        get showPagingBar(): ShowPagingBarType;
        set showPagingBar(newValue: ShowPagingBarType);
        get selectionMode(): GridSelectionMode;
        set selectionMode(newValue: GridSelectionMode);
        get selectFirst(): boolean;
        set selectFirst(newValue: boolean);
        get defaultButtonTrigger(): ClickTypeType;
        set defaultButtonTrigger(newValue: ClickTypeType);
        get refreshTime(): number;
        set refreshTime(newValue: number);
        get controlBar(): GridControlBar;
        set controlBar(newValue: GridControlBar);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class ColumnGrid extends Grid {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get columns(): internal.IList<GridColumn>;
        get numberOfRows(): number;
        set numberOfRows(newValue: number);
        get showEmptyRows(): boolean;
        set showEmptyRows(newValue: boolean);
        get widthUnit(): UnitEnum;
        set widthUnit(newValue: UnitEnum);
        get tooltipPage(): IPage | null;
        set tooltipPage(newValue: IPage | null);
        get tooltipPageQualifiedName(): string | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class ControlBarItem extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get containerAsGridControlBar(): GridControlBar;
        get name(): string;
        set name(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class SearchField extends ControlBarItem {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get caption(): texts.Text;
        set caption(newValue: texts.Text);
        /**
         * In version 7.21.0: introduced
         */
        get placeholder(): texts.Text;
        set placeholder(newValue: texts.Text);
        /**
         * In version 7.21.0: introduced
         */
        get customDateFormat(): string;
        set customDateFormat(newValue: string);
        get type(): SearchFieldType;
        set type(newValue: SearchFieldType);
        get defaultValue(): string;
        set defaultValue(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class SingleSearchField extends SearchField {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath(): string;
        set attributePath(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef(): domainmodels.AttributeRef | null;
        set attributeRef(newValue: domainmodels.AttributeRef | null);
        get operator(): SearchFieldOperator;
        set operator(newValue: SearchFieldOperator);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/search-bar relevant section in reference guide}
     */
    class ComparisonSearchField extends SingleSearchField {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * The new ComparisonSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): ComparisonSearchField;
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ComparisonSearchField;
    }
    /**
     * In version 10.2.0: introduced
     */
    class CompoundDesignPropertyValue extends AbstractDesignPropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDesignPropertyValue(): DesignPropertyValue;
        get properties(): internal.IList<DesignPropertyValue>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CompoundDesignPropertyValue instance in the SDK and on the server.
         * The new CompoundDesignPropertyValue will be automatically stored in the 'value' property
         * of the parent DesignPropertyValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.2.0 and higher
         */
        static createIn(container: DesignPropertyValue): CompoundDesignPropertyValue;
        /**
         * Creates and returns a new CompoundDesignPropertyValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CompoundDesignPropertyValue;
    }
    abstract class ConditionalSettings extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsCustomWidget(): customwidgets.CustomWidget;
        get containerAsConditionallyEditableWidget(): ConditionallyEditableWidget;
        get containerAsConditionallyVisibleWidget(): ConditionallyVisibleWidget;
        get containerAsControlBarButton(): ControlBarButton;
        get containerAsLayoutGridRow(): LayoutGridRow;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsTabPage(): TabPage;
        get containerAsTableRow(): TableRow;
        get attribute(): domainmodels.IAttribute | null;
        set attribute(newValue: domainmodels.IAttribute | null);
        get attributeQualifiedName(): string | null;
        get conditions(): internal.IList<enumerations.Condition>;
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 7.0.1: introduced
         */
        get expression(): string;
        set expression(newValue: string);
        /**
         * In version 9.24.0: introduced
         */
        get sourceVariable(): PageVariable | null;
        set sourceVariable(newValue: PageVariable | null);
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * @ignore
         *
         * In version 9.8.0: deleted
         * In version 7.9.0: introduced
         */
        get expressionModel(): expressions.Expression;
        set expressionModel(newValue: expressions.Expression);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    class ConditionalEditabilitySettings extends ConditionalSettings {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsCustomWidget(): customwidgets.CustomWidget;
        get containerAsConditionallyEditableWidget(): ConditionallyEditableWidget;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
         * of the parent ConditionallyEditableWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.0.0
         */
        static createIn(container: ConditionallyEditableWidget): ConditionalEditabilitySettings;
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
         * of the parent customwidgets.CustomWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.1.0 and higher
         */
        static createInCustomWidgetUnderConditionalEditabilitySettings(container: customwidgets.CustomWidget): ConditionalEditabilitySettings;
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
         * of the parent ConditionallyEditableWidget element passed as argument.
         */
        static createInConditionallyEditableWidgetUnderConditionalEditabilitySettings(container: ConditionallyEditableWidget): ConditionalEditabilitySettings;
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConditionalEditabilitySettings;
    }
    class ConditionalVisibilitySettings extends ConditionalSettings {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsCustomWidget(): customwidgets.CustomWidget;
        get containerAsConditionallyVisibleWidget(): ConditionallyVisibleWidget;
        get containerAsControlBarButton(): ControlBarButton;
        get containerAsLayoutGridRow(): LayoutGridRow;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsTabPage(): TabPage;
        get containerAsTableRow(): TableRow;
        get moduleRoles(): internal.IList<security.IModuleRole>;
        get moduleRolesQualifiedNames(): string[];
        get ignoreSecurity(): boolean;
        set ignoreSecurity(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent customwidgets.CustomWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.1.0 and higher
         */
        static createInCustomWidgetUnderConditionalVisibilitySettings(container: customwidgets.CustomWidget): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ConditionallyVisibleWidget element passed as argument.
         */
        static createInConditionallyVisibleWidgetUnderConditionalVisibilitySettings(container: ConditionallyVisibleWidget): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderConditionalVisibilitySettings(container: ControlBarButton): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent LayoutGridRow element passed as argument.
         */
        static createInLayoutGridRowUnderConditionalVisibilitySettings(container: LayoutGridRow): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderConditionalVisibilitySettings(container: NavigationListItem): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderConditionalVisibilitySettings(container: TabPage): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TableRow element passed as argument.
         */
        static createInTableRowUnderConditionalVisibilitySettings(container: TableRow): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConditionalVisibilitySettings;
    }
    class ConfirmationInfo extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsCallNanoflowClientAction(): CallNanoflowClientAction;
        get containerAsCallWorkflowClientAction(): CallWorkflowClientAction;
        get containerAsMicroflowSettings(): MicroflowSettings;
        get question(): texts.Text;
        set question(newValue: texts.Text);
        get proceedButtonCaption(): texts.Text;
        set proceedButtonCaption(newValue: texts.Text);
        get cancelButtonCaption(): texts.Text;
        set cancelButtonCaption(newValue: texts.Text);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent MicroflowSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.7.0
         */
        static createIn(container: MicroflowSettings): ConfirmationInfo;
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent CallNanoflowClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.8.0 and higher
         */
        static createInCallNanoflowClientActionUnderConfirmationInfo(container: CallNanoflowClientAction): ConfirmationInfo;
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent CallWorkflowClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.12.0 and higher
         */
        static createInCallWorkflowClientActionUnderConfirmationInfo(container: CallWorkflowClientAction): ConfirmationInfo;
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent MicroflowSettings element passed as argument.
         */
        static createInMicroflowSettingsUnderConfirmationInfo(container: MicroflowSettings): ConfirmationInfo;
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConfirmationInfo;
    }
    abstract class ControlBar extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get containerAsGrid(): Grid;
        get containerAsGridBaseSource(): GridBaseSource;
        get containerAsGridDatabaseSource(): GridDatabaseSource;
        get items(): internal.IList<ControlBarItem>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    abstract class ControlBarButton extends ControlBarItem {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get containerAsGridControlBar(): GridControlBar;
        get caption(): ClientTemplate;
        set caption(newValue: ClientTemplate);
        get tooltip(): texts.Text;
        set tooltip(newValue: texts.Text);
        get icon(): Icon | null;
        set icon(newValue: Icon | null);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        get conditionalVisibilitySettings(): ConditionalVisibilitySettings | null;
        set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings | null);
        get buttonStyle(): ButtonStyle;
        set buttonStyle(newValue: ButtonStyle);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 7.17.0: introduced
     */
    class CreateObjectClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get entityRef(): domainmodels.EntityRef | null;
        set entityRef(newValue: domainmodels.EntityRef | null);
        get pageSettings(): PageSettings;
        set pageSettings(newValue: PageSettings);
        /**
         * In version 8.14.0: deleted
         * In version 8.11.0: introduced
         */
        get numberOfPagesToClose(): number;
        set numberOfPagesToClose(newValue: number);
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 8.14.0: introduced
         */
        get numberOfPagesToClose2(): string;
        set numberOfPagesToClose2(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInListViewUnderClickAction(container: ListView): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * The new CreateObjectClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): CreateObjectClientAction;
        /**
         * Creates and returns a new CreateObjectClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CreateObjectClientAction;
    }
    /**
     * In version 10.2.0: introduced
     */
    class CustomDesignPropertyValue extends AbstractDesignPropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDesignPropertyValue(): DesignPropertyValue;
        get value(): string;
        set value(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CustomDesignPropertyValue instance in the SDK and on the server.
         * The new CustomDesignPropertyValue will be automatically stored in the 'value' property
         * of the parent DesignPropertyValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.2.0 and higher
         */
        static createIn(container: DesignPropertyValue): CustomDesignPropertyValue;
        /**
         * Creates and returns a new CustomDesignPropertyValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CustomDesignPropertyValue;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/data-grid relevant section in reference guide}
     */
    class DataGrid extends ColumnGrid {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 8.0.0: introduced
         */
        get caption(): ClientTemplate;
        set caption(newValue: ClientTemplate);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGrid;
    }
    abstract class GridControlBarButton extends ControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get containerAsGridControlBar(): GridControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class DataGridAddButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get pageSettings(): PageSettings;
        set pageSettings(newValue: PageSettings);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * The new DataGridAddButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridAddButton;
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridAddButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class DataGridExportToCSVButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get maxNumberOfRows(): number;
        set maxNumberOfRows(newValue: number);
        get decimalSeparator(): string;
        set decimalSeparator(newValue: string);
        get groupSeparator(): string;
        set groupSeparator(newValue: string);
        get delimiter(): string;
        set delimiter(newValue: string);
        get generateExcelHint(): boolean;
        set generateExcelHint(newValue: boolean);
        get useGridDateFormat(): boolean;
        set useGridDateFormat(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * The new DataGridExportToCSVButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridExportToCSVButton;
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridExportToCSVButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class DataGridExportToExcelButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get maxNumberOfRows(): number;
        set maxNumberOfRows(newValue: number);
        get useExcelDateType(): boolean;
        set useExcelDateType(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * The new DataGridExportToExcelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridExportToExcelButton;
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridExportToExcelButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class DataGridRemoveButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * The new DataGridRemoveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridRemoveButton;
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridRemoveButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/data-view relevant section in reference guide}
     */
    class DataView extends EntityWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 7.15.0: deleted
         * In version 6.7.0: introduced
         */
        get footerWidget(): Widget | null;
        set footerWidget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get footerWidgets(): internal.IList<Widget>;
        get editable(): boolean;
        set editable(newValue: boolean);
        /**
         * In version 6.7.0: deleted
         */
        get showControlBar(): boolean;
        set showControlBar(newValue: boolean);
        /**
         * In version 6.7.0: introduced
         */
        get showFooter(): boolean;
        set showFooter(newValue: boolean);
        /**
         * In version 6.7.0: deleted
         */
        get closeOnSaveOrCancel(): boolean;
        set closeOnSaveOrCancel(newValue: boolean);
        /**
         * In version 8.0.0: deleted
         */
        get useSchema(): boolean;
        set useSchema(newValue: boolean);
        get noEntityMessage(): texts.Text;
        set noEntityMessage(newValue: texts.Text);
        get labelWidth(): number;
        set labelWidth(newValue: number);
        /**
         * In version 6.7.0: deleted
         * In version 6.5.0: added optional
         */
        get controlBar(): DataViewControlBar | null;
        set controlBar(newValue: DataViewControlBar | null);
        /**
         * In version 6.9.0: introduced
         */
        get readOnlyStyle(): DataViewReadOnlyStyle;
        set readOnlyStyle(newValue: DataViewReadOnlyStyle);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataView;
    }
    /**
     * In version 6.7.0: deleted
     */
    abstract class DataViewControlBarButton extends ControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get tabIndex(): number;
        set tabIndex(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/data-view-action-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewActionButton extends DataViewControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get action(): ClientAction;
        set action(newValue: ClientAction);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * The new DataViewActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container: ControlBar): DataViewActionButton;
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewActionButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/data-view-cancel-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewCancelButton extends DataViewControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * The new DataViewCancelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container: ControlBar): DataViewCancelButton;
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewCancelButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/data-view-close-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewCloseButton extends DataViewControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * The new DataViewCloseButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container: ControlBar): DataViewCloseButton;
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewCloseButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/data-view-control-bar relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewControlBar extends ControlBar {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get closeButton(): ControlBarItem | null;
        set closeButton(newValue: ControlBarItem | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * The new DataViewControlBar will be automatically stored in the 'controlBar' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container: DataView): DataViewControlBar;
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewControlBar;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/data-view-save-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewSaveButton extends DataViewControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        /**
         * In version 6.6.0: introduced
         */
        get syncAutomatically(): boolean;
        set syncAutomatically(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * The new DataViewSaveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createIn(container: ControlBar): DataViewSaveButton;
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewSaveButton;
    }
    class DataViewSource extends EntityPathSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        /**
         * In version 10.2.0: deleted
         * In version 9.5.0: introduced
         */
        get pageParameter(): PageParameter | null;
        set pageParameter(newValue: PageParameter | null);
        get pageParameterLocalName(): string | null;
        /**
         * In version 10.2.0: deleted
         * In version 9.21.0: introduced
         */
        get snippetParameter(): SnippetParameter | null;
        set snippetParameter(newValue: SnippetParameter | null);
        get snippetParameterLocalName(): string | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * The new DataViewSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): DataViewSource;
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * The new DataViewSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): DataViewSource;
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * The new DataViewSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): DataViewSource;
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewSource;
    }
    /**
     * In version 10.5.0: deleted
     */
    class DatabaseConstraint extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDatabaseSourceBase(): DatabaseSourceBase;
        get containerAsSelectorDatabaseSource(): SelectorDatabaseSource;
        get attribute(): domainmodels.IAttribute | null;
        set attribute(newValue: domainmodels.IAttribute | null);
        get attributeQualifiedName(): string | null;
        get operator(): DatabaseConstraintOperator;
        set operator(newValue: DatabaseConstraintOperator);
        get value(): string;
        set value(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.0.1
         */
        static createIn(container: DatabaseSourceBase): DatabaseConstraint;
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 10.4.0
         */
        static createInDatabaseSourceBaseUnderDatabaseConstraints(container: DatabaseSourceBase): DatabaseConstraint;
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0 to 10.4.0
         */
        static createInSelectorDatabaseSourceUnderDatabaseConstraints(container: SelectorDatabaseSource): DatabaseConstraint;
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DatabaseConstraint;
    }
    abstract class SortableEntityPathSource extends EntityPathSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get sortBar(): GridSortBar;
        set sortBar(newValue: GridSortBar);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 10.5.0: deleted
     */
    abstract class DatabaseSourceBase extends SortableEntityPathSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get databaseConstraints(): internal.IList<DatabaseConstraint>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/date-picker relevant section in reference guide}
     */
    class DatePicker extends AttributeWidgetWithPlaceholder {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get formattingInfo(): FormattingInfo;
        set formattingInfo(newValue: FormattingInfo);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DatePicker;
    }
    /**
     * In version 7.17.0: introduced
     */
    class DeleteClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get closePage(): boolean;
        set closePage(newValue: boolean);
        /**
         * In version 10.4.0: introduced
         */
        get sourceVariable(): PageVariable | null;
        set sourceVariable(newValue: PageVariable | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInListViewUnderClickAction(container: ListView): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * The new DeleteClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): DeleteClientAction;
        /**
         * Creates and returns a new DeleteClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DeleteClientAction;
    }
    /**
     * In version 8.0.0: introduced
     */
    class DesignPropertyValue extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsAppearance(): Appearance;
        get containerAsCompoundDesignPropertyValue(): CompoundDesignPropertyValue;
        get key(): string;
        set key(newValue: string);
        /**
         * In version 10.2.0: deleted
         */
        get type(): DesignPropertyValueType;
        set type(newValue: DesignPropertyValueType);
        /**
         * In version 10.2.0: deleted
         */
        get stringValue(): string;
        set stringValue(newValue: string);
        /**
         * In version 10.2.0: deleted
         */
        get booleanValue(): boolean;
        set booleanValue(newValue: boolean);
        /**
         * In version 10.2.0: introduced
         */
        get value(): AbstractDesignPropertyValue | null;
        set value(newValue: AbstractDesignPropertyValue | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DesignPropertyValue instance in the SDK and on the server.
         * The new DesignPropertyValue will be automatically stored in the 'designProperties' property
         * of the parent Appearance element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 10.1.0
         */
        static createIn(container: Appearance): DesignPropertyValue;
        /**
         * Creates and returns a new DesignPropertyValue instance in the SDK and on the server.
         * The new DesignPropertyValue will be automatically stored in the 'designProperties' property
         * of the parent Appearance element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInAppearanceUnderDesignProperties(container: Appearance): DesignPropertyValue;
        /**
         * Creates and returns a new DesignPropertyValue instance in the SDK and on the server.
         * The new DesignPropertyValue will be automatically stored in the 'properties' property
         * of the parent CompoundDesignPropertyValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.2.0 and higher
         */
        static createInCompoundDesignPropertyValueUnderProperties(container: CompoundDesignPropertyValue): DesignPropertyValue;
        /**
         * Creates and returns a new DesignPropertyValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DesignPropertyValue;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/container relevant section in reference guide}
     */
    class DivContainer extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 7.23.0: introduced
         */
        get renderMode(): ContainerRenderMode;
        set renderMode(newValue: ContainerRenderMode);
        /**
         * In version 8.3.0: introduced
         */
        get onClickAction(): ClientAction;
        set onClickAction(newValue: ClientAction);
        /**
         * In version 8.12.0: introduced
         */
        get screenReaderHidden(): boolean;
        set screenReaderHidden(newValue: boolean);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DivContainer;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/drop-down relevant section in reference guide}
     */
    class DropDown extends AttributeWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.2.0: introduced
         */
        get emptyOptionCaption(): texts.Text;
        set emptyOptionCaption(newValue: texts.Text);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDown;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/button-widgets relevant section in reference guide}
     */
    class DropDownButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get items(): internal.IList<DropDownButtonItem>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDownButton;
    }
    class DropDownButtonItem extends ActionItem {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDropDownButton(): DropDownButton;
        get caption(): texts.Text;
        set caption(newValue: texts.Text);
        get image(): images.IImage | null;
        set image(newValue: images.IImage | null);
        get imageQualifiedName(): string | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * The new DropDownButtonItem will be automatically stored in the 'items' property
         * of the parent DropDownButton element passed as argument.
         */
        static createIn(container: DropDownButton): DropDownButtonItem;
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDownButtonItem;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/search-bar relevant section in reference guide}
     */
    class DropDownSearchField extends SingleSearchField {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get sortBar(): GridSortBar;
        set sortBar(newValue: GridSortBar);
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint(): string;
        set xPathConstraint(newValue: string);
        get allowMultipleSelect(): boolean;
        set allowMultipleSelect(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * The new DropDownSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DropDownSearchField;
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDownSearchField;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/image-viewer relevant section in reference guide}
     */
    class DynamicImageViewer extends EntityWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get defaultImage(): images.IImage | null;
        set defaultImage(newValue: images.IImage | null);
        get defaultImageQualifiedName(): string | null;
        get widthUnit(): ImageSizeUnit;
        set widthUnit(newValue: ImageSizeUnit);
        get heightUnit(): ImageSizeUnit;
        set heightUnit(newValue: ImageSizeUnit);
        get width(): number;
        set width(newValue: number);
        get height(): number;
        set height(newValue: number);
        get responsive(): boolean;
        set responsive(newValue: boolean);
        get showAsThumbnail(): boolean;
        set showAsThumbnail(newValue: boolean);
        /**
         * In version 7.18.0: deleted
         */
        get onClickBehavior(): OnClickBehavior;
        set onClickBehavior(newValue: OnClickBehavior);
        /**
         * In version 7.18.0: introduced
         */
        get clickAction(): ClientAction;
        set clickAction(newValue: ClientAction);
        /**
         * In version 7.18.0: introduced
         */
        get onClickEnlarge(): boolean;
        set onClickEnlarge(newValue: boolean);
        /**
         * In version 8.6.0: introduced
         */
        get alternativeText(): ClientTemplate;
        set alternativeText(newValue: ClientTemplate);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DynamicImageViewer;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/text relevant section in reference guide}
     */
    class DynamicText extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get content(): ClientTemplate;
        set content(newValue: ClientTemplate);
        get renderMode(): TextRenderMode;
        set renderMode(newValue: TextRenderMode);
        /**
         * In version 8.0.0: introduced
         */
        get nativeTextStyle(): NativeTextStyle;
        set nativeTextStyle(newValue: NativeTextStyle);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DynamicText;
    }
    /**
     * In version 8.13.0: introduced
     */
    interface ITemplateType extends internal.IElement {
        readonly model: IModel;
        readonly containerAsPageTemplate: IPageTemplate;
        asLoaded(): TemplateType;
        load(callback: (element: TemplateType) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<TemplateType>;
    }
    /**
     * In version 8.13.0: introduced
     */
    abstract class TemplateType extends internal.Element<IModel> implements ITemplateType {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageTemplate(): PageTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 8.13.0: introduced
     */
    interface IEditPageTemplateType extends ITemplateType {
        readonly model: IModel;
        readonly containerAsPageTemplate: IPageTemplate;
        asLoaded(): EditPageTemplateType;
        load(callback: (element: EditPageTemplateType) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<EditPageTemplateType>;
    }
    /**
     * In version 8.13.0: introduced
     */
    class EditPageTemplateType extends TemplateType implements IEditPageTemplateType {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageTemplate(): PageTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new EditPageTemplateType instance in the SDK and on the server.
         * The new EditPageTemplateType will be automatically stored in the 'templateType' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createIn(container: PageTemplate): EditPageTemplateType;
        /**
         * Creates and returns a new EditPageTemplateType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): EditPageTemplateType;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/file-manager relevant section in reference guide}
     */
    class FileManager extends InputWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get allowedExtensions(): string;
        set allowedExtensions(newValue: string);
        get type(): FileManagerType;
        set type(newValue: FileManagerType);
        get maxFileSize(): number;
        set maxFileSize(newValue: number);
        get showFileInBrowser(): boolean;
        set showFileInBrowser(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): FileManager;
    }
    class FormattingInfo extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataGridColumn(): documenttemplates.DataGridColumn;
        get containerAsDynamicLabel(): documenttemplates.DynamicLabel;
        get containerAsClientTemplateParameter(): ClientTemplateParameter;
        get containerAsDatePicker(): DatePicker;
        get containerAsGridColumn(): GridColumn;
        get containerAsReferenceSelector(): ReferenceSelector;
        get containerAsTextBox(): TextBox;
        get decimalPrecision(): number;
        set decimalPrecision(newValue: number);
        get groupDigits(): boolean;
        set groupDigits(newValue: boolean);
        get enumFormat(): EnumFormat;
        set enumFormat(newValue: EnumFormat);
        get dateFormat(): DateFormat;
        set dateFormat(newValue: DateFormat);
        get customDateFormat(): string;
        set customDateFormat(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DataGridColumn element passed as argument.
         */
        static createInDataGridColumnUnderFormattingInfo(container: documenttemplates.DataGridColumn): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DynamicLabel element passed as argument.
         */
        static createInDynamicLabelUnderFormattingInfo(container: documenttemplates.DynamicLabel): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent ClientTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInClientTemplateParameterUnderFormattingInfo(container: ClientTemplateParameter): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent DatePicker element passed as argument.
         */
        static createInDatePickerUnderFormattingInfo(container: DatePicker): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent GridColumn element passed as argument.
         */
        static createInGridColumnUnderFormattingInfo(container: GridColumn): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent ReferenceSelector element passed as argument.
         */
        static createInReferenceSelectorUnderFormattingInfo(container: ReferenceSelector): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent TextBox element passed as argument.
         */
        static createInTextBoxUnderFormattingInfo(container: TextBox): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): FormattingInfo;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/image relevant section in reference guide}
     */
    abstract class Icon extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsButton(): Button;
        get containerAsControlBarButton(): ControlBarButton;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    class GlyphIcon extends Icon {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsButton(): Button;
        get containerAsControlBarButton(): ControlBarButton;
        get code(): number;
        set code(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWidgetValueUnderIcon(container: customwidgets.WidgetValue): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderIcon(container: menus.MenuItem): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInBottomBarItemUnderIcon(container: nativepages.BottomBarItem): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderIcon(container: Button): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderIcon(container: ControlBarButton): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GlyphIcon;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class GridActionButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get action(): ClientAction;
        set action(newValue: ClientAction);
        get maintainSelectionAfterMicroflow(): boolean;
        set maintainSelectionAfterMicroflow(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * The new GridActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridActionButton;
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridActionButton;
    }
    abstract class GridBaseSource extends SortableEntityPathSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get searchBar(): SearchBar;
        set searchBar(newValue: SearchBar);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/columns relevant section in reference guide}
     */
    class GridColumn extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsColumnGrid(): ColumnGrid;
        get name(): string;
        set name(newValue: string);
        get caption(): texts.Text;
        set caption(newValue: texts.Text);
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath(): string;
        set attributePath(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef(): domainmodels.AttributeRef | null;
        set attributeRef(newValue: domainmodels.AttributeRef | null);
        get formattingInfo(): FormattingInfo;
        set formattingInfo(newValue: FormattingInfo);
        get showTooltip(): boolean;
        set showTooltip(newValue: boolean);
        get aggregateCaption(): texts.Text;
        set aggregateCaption(newValue: texts.Text);
        get aggregateFunction(): AggregateFunction;
        set aggregateFunction(newValue: AggregateFunction);
        get editable(): boolean;
        set editable(newValue: boolean);
        get width(): number;
        set width(newValue: number);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * The new GridColumn will be automatically stored in the 'columns' property
         * of the parent ColumnGrid element passed as argument.
         */
        static createIn(container: ColumnGrid): GridColumn;
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridColumn;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class GridControlBar extends ControlBar {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsGrid(): Grid;
        /**
         * In version 7.13.0: deleted
         */
        get searchButton(): GridSearchButton;
        set searchButton(newValue: GridSearchButton);
        get defaultButton(): ControlBarItem | null;
        set defaultButton(newValue: ControlBarItem | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * The new GridControlBar will be automatically stored in the 'controlBar' property
         * of the parent Grid element passed as argument.
         */
        static createIn(container: Grid): GridControlBar;
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridControlBar;
    }
    /**
     * In version 10.5.0: deleted
     */
    class GridDatabaseSource extends DatabaseSourceBase {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get searchBar(): SearchBar;
        set searchBar(newValue: SearchBar);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): GridDatabaseSource;
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 to 10.4.0
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): GridDatabaseSource;
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 10.4.0
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): GridDatabaseSource;
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridDatabaseSource;
    }
    /**
     * In version 7.17.0: deleted
     */
    class GridDeleteButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * The new GridDeleteButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.16.0
         */
        static createIn(container: ControlBar): GridDeleteButton;
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridDeleteButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class GridDeselectAllButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * The new GridDeselectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridDeselectAllButton;
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridDeselectAllButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
     *
     * In version 7.17.0: deleted
     */
    class GridEditButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get pageSettings(): PageSettings;
        set pageSettings(newValue: PageSettings);
        get pagesForSpecializations(): internal.IList<PageForSpecialization>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * The new GridEditButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.16.0
         */
        static createIn(container: ControlBar): GridEditButton;
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridEditButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class GridNewButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get entity(): domainmodels.IEntity | null;
        set entity(newValue: domainmodels.IEntity | null);
        get entityQualifiedName(): string | null;
        get editLocation(): NewButtonEditLocation;
        set editLocation(newValue: NewButtonEditLocation);
        get pageSettings(): PageSettings;
        set pageSettings(newValue: PageSettings);
        /**
         * In version 6.2.0: deleted
         * In version 6.0.0: deprecated
         */
        get isPersistent(): boolean;
        set isPersistent(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * The new GridNewButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridNewButton;
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridNewButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class GridSearchButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get containerAsGridControlBar(): GridControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createIn(container: ControlBar): GridSearchButton;
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createInControlBarUnderItems(container: ControlBar): GridSearchButton;
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'searchButton' property
         * of the parent GridControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInGridControlBarUnderSearchButton(container: GridControlBar): GridSearchButton;
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSearchButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class GridSelectAllButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        get selectionType(): SelectionType;
        set selectionType(newValue: SelectionType);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * The new GridSelectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridSelectAllButton;
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSelectAllButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/sort-bar relevant section in reference guide}
     */
    class GridSortBar extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDropDownSearchField(): DropDownSearchField;
        get containerAsSelectorDatabaseSource(): SelectorDatabaseSource;
        get containerAsSelectorXPathSource(): SelectorXPathSource;
        get containerAsSortableEntityPathSource(): SortableEntityPathSource;
        get sortItems(): internal.IList<GridSortItem>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent DropDownSearchField element passed as argument.
         */
        static createInDropDownSearchFieldUnderSortBar(container: DropDownSearchField): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.2.0 to 10.4.0
         */
        static createInSelectorDatabaseSourceUnderSortBar(container: SelectorDatabaseSource): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorXPathSource element passed as argument.
         */
        static createInSelectorXPathSourceUnderSortBar(container: SelectorXPathSource): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SortableEntityPathSource element passed as argument.
         */
        static createInSortableEntityPathSourceUnderSortBar(container: SortableEntityPathSource): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSortBar;
    }
    class GridSortItem extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsGridSortBar(): GridSortBar;
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attributePath(): string;
        set attributePath(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef(): domainmodels.AttributeRef;
        set attributeRef(newValue: domainmodels.AttributeRef);
        get sortDirection(): SortDirection;
        set sortDirection(newValue: SortDirection);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * The new GridSortItem will be automatically stored in the 'sortItems' property
         * of the parent GridSortBar element passed as argument.
         */
        static createIn(container: GridSortBar): GridSortItem;
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSortItem;
    }
    class GridXPathSource extends GridBaseSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint(): string;
        set xPathConstraint(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get applyContext(): boolean;
        set applyContext(newValue: boolean);
        /**
         * In version 8.0.0: deleted
         */
        get removeAllFromContext(): boolean;
        set removeAllFromContext(newValue: boolean);
        /**
         * In version 8.0.0: deleted
         */
        get removeFromContextIds(): internal.IList<domainmodels.IEntity>;
        get removeFromContextIdsQualifiedNames(): string[];
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * The new GridXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): GridXPathSource;
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * The new GridXPathSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): GridXPathSource;
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * The new GridXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): GridXPathSource;
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridXPathSource;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/group-box relevant section in reference guide}
     */
    class GroupBox extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get caption(): ClientTemplate | null;
        set caption(newValue: ClientTemplate | null);
        get collapsible(): GroupBoxCollapsible;
        set collapsible(newValue: GroupBoxCollapsible);
        /**
         * In version 8.10.0: introduced
         */
        get headerMode(): GroupBoxRenderMode;
        set headerMode(newValue: GroupBoxRenderMode);
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GroupBox;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/header relevant section in reference guide}
     */
    class Header extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.15.0: deleted
         */
        get leftWidget(): Widget | null;
        set leftWidget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get leftWidgets(): internal.IList<Widget>;
        /**
         * In version 7.15.0: deleted
         */
        get rightWidget(): Widget | null;
        set rightWidget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get rightWidgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Header;
    }
    /**
     * In version 8.0.0: deleted
     */
    abstract class SplitPane extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.15.0: deleted
         */
        get firstWidget(): Widget | null;
        set firstWidget(newValue: Widget | null);
        /**
         * In version 7.15.0: deleted
         */
        get secondWidget(): Widget | null;
        set secondWidget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get firstWidgets(): internal.IList<Widget>;
        /**
         * In version 7.15.0: introduced
         */
        get secondWidgets(): internal.IList<Widget>;
        get animatedResize(): boolean;
        set animatedResize(newValue: boolean);
        get height(): number;
        set height(newValue: number);
        get position(): number;
        set position(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
     *
     * In version 8.0.0: deleted
     */
    class HorizontalSplitPane extends SplitPane {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInDataViewUnderFooterWidgets(container: DataView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInDataViewUnderWidgets(container: DataView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInDivContainerUnderWidgets(container: DivContainer): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInHeaderUnderLeftWidgets(container: Header): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInHeaderUnderRightWidgets(container: Header): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInListViewUnderWidgets(container: ListView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSnippetUnderWidgets(container: Snippet): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInTabPageUnderWidgets(container: TabPage): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInTableCellUnderWidgets(container: TableCell): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): HorizontalSplitPane;
    }
    /**
     * In version 9.20.0: introduced
     */
    class IconCollectionIcon extends Icon {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsButton(): Button;
        get containerAsControlBarButton(): ControlBarButton;
        get image(): customicons.ICustomIcon;
        set image(newValue: customicons.ICustomIcon);
        get imageQualifiedName(): string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new IconCollectionIcon instance in the SDK and on the server.
         * The new IconCollectionIcon will be automatically stored in the 'icon' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.20.0 and higher
         */
        static createInWidgetValueUnderIcon(container: customwidgets.WidgetValue): IconCollectionIcon;
        /**
         * Creates and returns a new IconCollectionIcon instance in the SDK and on the server.
         * The new IconCollectionIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.20.0 and higher
         */
        static createInMenuItemUnderIcon(container: menus.MenuItem): IconCollectionIcon;
        /**
         * Creates and returns a new IconCollectionIcon instance in the SDK and on the server.
         * The new IconCollectionIcon will be automatically stored in the 'icon' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.20.0 and higher
         */
        static createInBottomBarItemUnderIcon(container: nativepages.BottomBarItem): IconCollectionIcon;
        /**
         * Creates and returns a new IconCollectionIcon instance in the SDK and on the server.
         * The new IconCollectionIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.20.0 and higher
         */
        static createInButtonUnderIcon(container: Button): IconCollectionIcon;
        /**
         * Creates and returns a new IconCollectionIcon instance in the SDK and on the server.
         * The new IconCollectionIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.20.0 and higher
         */
        static createInControlBarButtonUnderIcon(container: ControlBarButton): IconCollectionIcon;
        /**
         * Creates and returns a new IconCollectionIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): IconCollectionIcon;
    }
    class ImageIcon extends Icon {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsButton(): Button;
        get containerAsControlBarButton(): ControlBarButton;
        get image(): images.IImage;
        set image(newValue: images.IImage);
        get imageQualifiedName(): string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWidgetValueUnderIcon(container: customwidgets.WidgetValue): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderIcon(container: menus.MenuItem): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInBottomBarItemUnderIcon(container: nativepages.BottomBarItem): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderIcon(container: Button): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderIcon(container: ControlBarButton): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageIcon;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/image-uploader relevant section in reference guide}
     */
    class ImageUploader extends InputWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get allowedExtensions(): string;
        set allowedExtensions(newValue: string);
        get thumbnailSize(): common.ISize;
        set thumbnailSize(newValue: common.ISize);
        get maxFileSize(): number;
        set maxFileSize(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageUploader;
    }
    class ImageViewerSource extends EntityPathSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * The new ImageViewerSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): ImageViewerSource;
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * The new ImageViewerSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): ImageViewerSource;
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * The new ImageViewerSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): ImageViewerSource;
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageViewerSource;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/input-reference-set-selector relevant section in reference guide}
     */
    class InputReferenceSetSelector extends AssociationWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): InputReferenceSetSelector;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/label relevant section in reference guide}
     */
    class Label extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get caption(): texts.Text;
        set caption(newValue: texts.Text);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Label;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/layout relevant section in reference guide}
     */
    interface ILayout extends IFormBase {
        readonly model: IModel;
        readonly containerAsFolderBase: projects.IFolderBase;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 8.0.0: introduced
         */
        readonly content: ILayoutContent;
        /**
         * In version 8.0.0: deleted
         * In version 7.17.0: added public
         * In version 6.8.0: added optional
         */
        readonly layoutCall: ILayoutCall | null;
        /**
         * In version 8.0.0: deleted
         * In version 6.8.0: added public
         */
        readonly layoutType: LayoutType;
        asLoaded(): Layout;
        load(callback: (element: Layout) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<Layout>;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/layout relevant section in reference guide}
     */
    class Layout extends FormBase implements ILayout {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsFolderBase(): projects.FolderBase;
        /**
         * In version 8.0.0: introduced
         */
        get content(): LayoutContent;
        set content(newValue: LayoutContent);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 8.0.0: deleted
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 8.0.0: deleted
         * In version 7.17.0: added public
         * In version 6.8.0: added optional
         */
        get layoutCall(): LayoutCall | null;
        set layoutCall(newValue: LayoutCall | null);
        /**
         * In version 8.0.0: deleted
         * In version 6.8.0: added public
         */
        get layoutType(): LayoutType;
        set layoutType(newValue: LayoutType);
        /**
         * In version 6.8.0: deleted
         */
        get mainPlaceholder(): ILayoutParameter | null;
        set mainPlaceholder(newValue: ILayoutParameter | null);
        get mainPlaceholderQualifiedName(): string | null;
        /**
         * In version 6.8.0: deleted
         */
        get acceptButtonPlaceholder(): ILayoutParameter | null;
        set acceptButtonPlaceholder(newValue: ILayoutParameter | null);
        get acceptButtonPlaceholderQualifiedName(): string | null;
        /**
         * In version 6.8.0: deleted
         */
        get cancelButtonPlaceholder(): ILayoutParameter | null;
        set cancelButtonPlaceholder(newValue: ILayoutParameter | null);
        get cancelButtonPlaceholderQualifiedName(): string | null;
        /**
         * In version 7.9.0: deleted
         * In version 6.8.0: introduced
         */
        get mainPlaceholderName(): string;
        set mainPlaceholderName(newValue: string);
        /**
         * In version 7.9.0: deleted
         * In version 6.8.0: introduced
         */
        get acceptPlaceholderName(): string;
        set acceptPlaceholderName(newValue: string);
        /**
         * In version 7.9.0: deleted
         * In version 6.8.0: introduced
         */
        get cancelPlaceholderName(): string;
        set cancelPlaceholderName(newValue: string);
        /**
         * In version 7.9.0: deleted
         */
        get useMainPlaceholderForPopups(): boolean;
        set useMainPlaceholderForPopups(newValue: boolean);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Layout unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Layout;
    }
    /**
     * In version 7.17.0: added public
     */
    interface ILayoutCall extends internal.IElement {
        readonly model: IModel;
        readonly containerAsLayout: ILayout;
        readonly containerAsPage: IPage;
        readonly containerAsPageTemplate: IPageTemplate;
        readonly containerAsWebLayoutContent: IWebLayoutContent;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 8.0.0: removed optional
         * In version 7.17.0: added public
         */
        readonly layout: ILayout | null;
        readonly layoutQualifiedName: string | null;
        asLoaded(): LayoutCall;
        load(callback: (element: LayoutCall) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<LayoutCall>;
    }
    /**
     * In version 7.17.0: added public
     */
    class LayoutCall extends internal.Element<IModel> implements ILayoutCall {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayout(): Layout;
        get containerAsPage(): Page;
        get containerAsPageTemplate(): PageTemplate;
        get containerAsWebLayoutContent(): WebLayoutContent;
        /**
         * In version 8.0.0: removed optional
         * In version 7.17.0: added public
         */
        get layout(): ILayout | null;
        set layout(newValue: ILayout | null);
        get layoutQualifiedName(): string | null;
        get arguments(): internal.IList<LayoutCallArgument>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.23.0
         */
        static createInLayoutUnderLayoutCall(container: Layout): LayoutCall;
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Page element passed as argument.
         */
        static createInPageUnderLayoutCall(container: Page): LayoutCall;
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 and higher
         */
        static createInPageTemplateUnderLayoutCall(container: PageTemplate): LayoutCall;
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderLayoutCall(container: WebLayoutContent): LayoutCall;
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutCall;
    }
    class LayoutCallArgument extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayoutCall(): LayoutCall;
        /**
         * In version 6.8.0: deleted
         */
        get parameterName(): string;
        set parameterName(newValue: string);
        /**
         * In version 6.8.0: introduced
         */
        get parameter(): ILayoutParameter;
        set parameter(newValue: ILayoutParameter);
        get parameterQualifiedName(): string;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * The new LayoutCallArgument will be automatically stored in the 'arguments' property
         * of the parent LayoutCall element passed as argument.
         */
        static createIn(container: LayoutCall): LayoutCallArgument;
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutCallArgument;
    }
    /**
     * In version 8.0.0: introduced
     */
    interface ILayoutContent extends internal.IElement {
        readonly model: IModel;
        readonly containerAsLayout: ILayout;
        asLoaded(): LayoutContent;
        load(callback: (element: LayoutContent) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<LayoutContent>;
    }
    /**
     * In version 8.0.0: introduced
     */
    abstract class LayoutContent extends internal.Element<IModel> implements ILayoutContent {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayout(): Layout;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/layout-grid relevant section in reference guide}
     */
    class LayoutGrid extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get width(): ContainerWidth;
        set width(newValue: ContainerWidth);
        get rows(): internal.IList<LayoutGridRow>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutGrid;
    }
    class LayoutGridColumn extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayoutGridRow(): LayoutGridRow;
        get weight(): number;
        set weight(newValue: number);
        /**
         * In version 8.3.0: introduced
         */
        get tabletWeight(): number;
        set tabletWeight(newValue: number);
        /**
         * In version 8.3.0: introduced
         */
        get phoneWeight(): number;
        set phoneWeight(newValue: number);
        /**
         * In version 9.16.0: introduced
         */
        get previewWidth(): number;
        set previewWidth(newValue: number);
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        /**
         * In version 8.3.0: introduced
         */
        get verticalAlignment(): LayoutGridAlignment;
        set verticalAlignment(newValue: LayoutGridAlignment);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * The new LayoutGridColumn will be automatically stored in the 'columns' property
         * of the parent LayoutGridRow element passed as argument.
         */
        static createIn(container: LayoutGridRow): LayoutGridColumn;
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutGridColumn;
    }
    class LayoutGridRow extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayoutGrid(): LayoutGrid;
        get columns(): internal.IList<LayoutGridColumn>;
        get conditionalVisibilitySettings(): ConditionalVisibilitySettings | null;
        set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings | null);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        /**
         * In version 8.3.0: introduced
         */
        get verticalAlignment(): LayoutGridAlignment;
        set verticalAlignment(newValue: LayoutGridAlignment);
        /**
         * In version 8.3.0: introduced
         */
        get horizontalAlignment(): LayoutGridAlignment;
        set horizontalAlignment(newValue: LayoutGridAlignment);
        /**
         * In version 8.3.0: introduced
         */
        get spacingBetweenColumns(): boolean;
        set spacingBetweenColumns(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * The new LayoutGridRow will be automatically stored in the 'rows' property
         * of the parent LayoutGrid element passed as argument.
         */
        static createIn(container: LayoutGrid): LayoutGridRow;
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutGridRow;
    }
    interface ILayoutParameter extends internal.IElement, internal.IByNameReferrable {
        readonly model: IModel;
        readonly containerAsLayout: ILayout;
        readonly name: string;
        asLoaded(): LayoutParameter;
        load(callback: (element: LayoutParameter) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<LayoutParameter>;
    }
    class LayoutParameter extends internal.Element<IModel> implements ILayoutParameter {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayout(): Layout;
        get name(): string;
        set name(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        get qualifiedName(): string | null;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
     *
     * In version 7.3.0: deleted
     */
    class LinkButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        get linkType(): LinkType;
        set linkType(newValue: LinkType);
        get address(): StaticOrDynamicString;
        set address(newValue: StaticOrDynamicString);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.2.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInDataViewUnderWidget(container: DataView): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInHeaderUnderLeftWidget(container: Header): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInHeaderUnderRightWidget(container: Header): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLayoutUnderWidget(container: Layout): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInListViewUnderWidget(container: ListView): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.2.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInSnippetUnderWidget(container: Snippet): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInTabPageUnderWidget(container: TabPage): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInTableCellUnderWidget(container: TableCell): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LinkButton;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/list-view relevant section in reference guide}
     */
    class ListView extends ListenTargetWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        get pageSize(): number;
        set pageSize(newValue: number);
        get clickAction(): ClientAction;
        set clickAction(newValue: ClientAction);
        get editable(): boolean;
        set editable(newValue: boolean);
        get templates(): internal.IList<ListViewTemplate>;
        /**
         * In version 8.0.0: introduced
         */
        get scrollDirection(): ScrollDirection;
        set scrollDirection(newValue: ScrollDirection);
        /**
         * In version 8.0.0: introduced
         */
        get numberOfColumns(): number;
        set numberOfColumns(newValue: number);
        /**
         * In version 8.0.0: introduced
         */
        get pullDownAction(): ClientAction;
        set pullDownAction(newValue: ClientAction);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListView;
    }
    /**
     * In version 10.5.0: deleted
     */
    class ListViewDatabaseSource extends DatabaseSourceBase {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get search(): ListViewSearch;
        set search(newValue: ListViewSearch);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): ListViewDatabaseSource;
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 to 10.4.0
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): ListViewDatabaseSource;
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 10.4.0
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): ListViewDatabaseSource;
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewDatabaseSource;
    }
    class ListViewSearch extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsListViewDatabaseSource(): ListViewDatabaseSource;
        get containerAsListViewXPathSource(): ListViewXPathSource;
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get searchPaths(): internal.IList<string>;
        /**
         * In version 7.11.0: introduced
         */
        get searchRefs(): internal.IList<domainmodels.AttributeRef>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewXPathSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.5.0 and higher
         */
        static createIn(container: ListViewXPathSource): ListViewSearch;
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 10.4.0
         */
        static createInListViewDatabaseSourceUnderSearch(container: ListViewDatabaseSource): ListViewSearch;
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewXPathSource element passed as argument.
         */
        static createInListViewXPathSourceUnderSearch(container: ListViewXPathSource): ListViewSearch;
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewSearch;
    }
    class ListViewTemplate extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsListView(): ListView;
        get specialization(): domainmodels.IEntity;
        set specialization(newValue: domainmodels.IEntity);
        get specializationQualifiedName(): string;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * The new ListViewTemplate will be automatically stored in the 'templates' property
         * of the parent ListView element passed as argument.
         */
        static createIn(container: ListView): ListViewTemplate;
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewTemplate;
    }
    abstract class XPathSourceBase extends SortableEntityPathSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint(): string;
        set xPathConstraint(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    class ListViewXPathSource extends XPathSourceBase {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get search(): ListViewSearch;
        set search(newValue: ListViewSearch);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): ListViewXPathSource;
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): ListViewXPathSource;
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): ListViewXPathSource;
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewXPathSource;
    }
    class ListenTargetSource extends DataSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get listenTarget(): string;
        set listenTarget(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * The new ListenTargetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): ListenTargetSource;
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * The new ListenTargetSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): ListenTargetSource;
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * The new ListenTargetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): ListenTargetSource;
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListenTargetSource;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/sign-in-button relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class LoginButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get validationMessageWidget(): string;
        set validationMessageWidget(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * The new LoginButton will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): LoginButton;
        /**
         * Creates and returns a new LoginButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LoginButton;
    }
    /**
     * In version 7.0.2: introduced
     */
    abstract class LoginTextBox extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get label(): texts.Text | null;
        set label(newValue: texts.Text | null);
        get labelWidth(): number;
        set labelWidth(newValue: number);
        get placeholder(): texts.Text;
        set placeholder(newValue: texts.Text);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/login-id-text-box relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class LoginIdTextBox extends LoginTextBox {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * The new LoginIdTextBox will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): LoginIdTextBox;
        /**
         * Creates and returns a new LoginIdTextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LoginIdTextBox;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
     *
     * In version 7.1.0: deleted
     */
    class LogoutButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.2
         */
        static createInDataViewUnderFooterWidget(container: DataView): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInDataViewUnderWidget(container: DataView): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInDivContainerUnderWidget(container: DivContainer): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInHeaderUnderLeftWidget(container: Header): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInHeaderUnderRightWidget(container: Header): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInLayoutUnderWidget(container: Layout): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInListViewUnderWidget(container: ListView): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInSnippetUnderWidget(container: Snippet): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInTabPageUnderWidget(container: TabPage): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInTableCellUnderWidget(container: TableCell): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.2
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LogoutButton;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * @ignore
     *
     * In version 7.15.0: deleted
     * In version 7.1.0: introduced
     */
    class MasterDetail extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * @ignore
         */
        get master(): MasterDetailMasterRegion;
        set master(newValue: MasterDetailMasterRegion);
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * @ignore
         */
        get detail(): MasterDetailDetailRegion;
        set detail(newValue: MasterDetailDetailRegion);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * The new MasterDetail will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): MasterDetail;
        /**
         * Creates and returns a new MasterDetail instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MasterDetail;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * @ignore
     *
     * In version 7.15.0: deleted
     * In version 7.1.0: introduced
     */
    abstract class MasterDetailRegion extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsMasterDetail(): MasterDetail;
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        get class(): string;
        set class(newValue: string);
        get style(): string;
        set style(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * @ignore
     *
     * In version 7.15.0: deleted
     * In version 7.1.0: introduced
     */
    class MasterDetailDetailRegion extends MasterDetailRegion {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsMasterDetail(): MasterDetail;
        get responsiveWeight(): number;
        set responsiveWeight(newValue: number);
        get tabletWeight(): number;
        set tabletWeight(newValue: number);
        get title(): texts.Text;
        set title(newValue: texts.Text);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MasterDetailDetailRegion instance in the SDK and on the server.
         * The new MasterDetailDetailRegion will be automatically stored in the 'detail' property
         * of the parent MasterDetail element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createIn(container: MasterDetail): MasterDetailDetailRegion;
        /**
         * Creates and returns a new MasterDetailDetailRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MasterDetailDetailRegion;
    }
    /**
     * NOTE: This class is experimental and is subject to change in newer Model SDK versions.
     *
     * @ignore
     *
     * In version 7.15.0: deleted
     * In version 7.1.0: introduced
     */
    class MasterDetailMasterRegion extends MasterDetailRegion {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsMasterDetail(): MasterDetail;
        get responsiveWeight(): number;
        set responsiveWeight(newValue: number);
        get tabletWeight(): number;
        set tabletWeight(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MasterDetailMasterRegion instance in the SDK and on the server.
         * The new MasterDetailMasterRegion will be automatically stored in the 'master' property
         * of the parent MasterDetail element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createIn(container: MasterDetail): MasterDetailMasterRegion;
        /**
         * Creates and returns a new MasterDetailMasterRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MasterDetailMasterRegion;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/menu-widgets relevant section in reference guide}
     */
    abstract class MenuWidget extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get menuSource(): MenuSource;
        set menuSource(newValue: MenuSource);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/menu-bar relevant section in reference guide}
     */
    class MenuBar extends MenuWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MenuBar;
    }
    abstract class MenuSource extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsMenuWidget(): MenuWidget;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    class MenuDocumentSource extends MenuSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsMenuWidget(): MenuWidget;
        get menu(): menus.IMenuDocument | null;
        set menu(newValue: menus.IMenuDocument | null);
        get menuQualifiedName(): string | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * The new MenuDocumentSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        static createIn(container: MenuWidget): MenuDocumentSource;
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MenuDocumentSource;
    }
    class MicroflowClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDataViewActionButton(): DataViewActionButton;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get microflowSettings(): MicroflowSettings;
        set microflowSettings(newValue: MicroflowSettings);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container: ActionButton): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container: ActionItem): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container: DataViewActionButton): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container: ListView): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowClientAction;
    }
    /**
     * In version 7.19.0: introduced
     */
    class MicroflowParameterMapping extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsMicroflowSettings(): MicroflowSettings;
        get parameter(): microflows.IMicroflowParameter;
        set parameter(newValue: microflows.IMicroflowParameter);
        get parameterQualifiedName(): string;
        /**
         * In version 8.4.0: introduced
         */
        get variable(): PageVariable;
        set variable(newValue: PageVariable);
        /**
         * In version 8.4.0: deleted
         */
        get widget(): EntityWidget | null;
        set widget(newValue: EntityWidget | null);
        get widgetLocalName(): string | null;
        /**
         * In version 8.4.0: deleted
         */
        get useAllPages(): boolean;
        set useAllPages(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowParameterMapping instance in the SDK and on the server.
         * The new MicroflowParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent MicroflowSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createIn(container: MicroflowSettings): MicroflowParameterMapping;
        /**
         * Creates and returns a new MicroflowParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowParameterMapping;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/on-click-event relevant section in reference guide}
     */
    class MicroflowSettings extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsMicroflowClientAction(): MicroflowClientAction;
        get containerAsMicroflowSource(): MicroflowSource;
        get containerAsOnClickMicroflow(): OnClickMicroflow;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsSelectorMicroflowSource(): SelectorMicroflowSource;
        get microflow(): microflows.IMicroflow | null;
        set microflow(newValue: microflows.IMicroflow | null);
        get microflowQualifiedName(): string | null;
        /**
         * In version 7.19.0: introduced
         */
        get parameterMappings(): internal.IList<MicroflowParameterMapping>;
        /**
         * In version 7.19.0: deleted
         */
        get useAllPages(): boolean;
        set useAllPages(newValue: boolean);
        get progressBar(): ProgressBarType;
        set progressBar(newValue: ProgressBarType);
        get progressMessage(): texts.Text | null;
        set progressMessage(newValue: texts.Text | null);
        get asynchronous(): boolean;
        set asynchronous(newValue: boolean);
        get formValidations(): FormValidations;
        set formValidations(newValue: FormValidations);
        get confirmationInfo(): ConfirmationInfo | null;
        set confirmationInfo(newValue: ConfirmationInfo | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAssociationWidgetUnderOnChangeMicroflowSettings(container: AssociationWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAttributeWidgetUnderOnChangeMicroflowSettings(container: AttributeWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onEnterMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAttributeWidgetUnderOnEnterMicroflowSettings(container: AttributeWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onLeaveMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInAttributeWidgetUnderOnLeaveMicroflowSettings(container: AttributeWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowClientAction element passed as argument.
         */
        static createInMicroflowClientActionUnderMicroflowSettings(container: MicroflowClientAction): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowSource element passed as argument.
         */
        static createInMicroflowSourceUnderMicroflowSettings(container: MicroflowSource): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent OnClickMicroflow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.17.0
         */
        static createInOnClickMicroflowUnderMicroflowSettings(container: OnClickMicroflow): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.12.0
         */
        static createInReferenceSetSelectorUnderOnChangeMicroflowSettings(container: ReferenceSetSelector): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'dataSourceMicroflowSettings' property
         * of the parent SelectorMicroflowSource element passed as argument.
         */
        static createInSelectorMicroflowSourceUnderDataSourceMicroflowSettings(container: SelectorMicroflowSource): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowSettings;
    }
    class MicroflowSource extends DataSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get microflowSettings(): MicroflowSettings;
        set microflowSettings(newValue: MicroflowSettings);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * The new MicroflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): MicroflowSource;
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * The new MicroflowSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): MicroflowSource;
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * The new MicroflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): MicroflowSource;
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowSource;
    }
    /**
     * In version 10.1.0: deleted
     * In version 9.24.0: introduced
     */
    class NamedValue extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsRuntimeOperation(): RuntimeOperation;
        get name(): string;
        set name(newValue: string);
        get value(): string;
        set value(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NamedValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NamedValue;
    }
    /**
     * In version 7.19.0: introduced
     */
    class NanoflowParameterMapping extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsCallNanoflowClientAction(): CallNanoflowClientAction;
        get containerAsNanoflowSource(): NanoflowSource;
        get parameter(): microflows.INanoflowParameter;
        set parameter(newValue: microflows.INanoflowParameter);
        get parameterQualifiedName(): string;
        /**
         * In version 8.4.0: introduced
         */
        get variable(): PageVariable;
        set variable(newValue: PageVariable);
        /**
         * In version 8.4.0: deleted
         */
        get widget(): EntityWidget | null;
        set widget(newValue: EntityWidget | null);
        get widgetLocalName(): string | null;
        /**
         * In version 8.4.0: deleted
         */
        get useAllPages(): boolean;
        set useAllPages(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NanoflowParameterMapping instance in the SDK and on the server.
         * The new NanoflowParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent CallNanoflowClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInCallNanoflowClientActionUnderParameterMappings(container: CallNanoflowClientAction): NanoflowParameterMapping;
        /**
         * Creates and returns a new NanoflowParameterMapping instance in the SDK and on the server.
         * The new NanoflowParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent NanoflowSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInNanoflowSourceUnderParameterMappings(container: NanoflowSource): NanoflowParameterMapping;
        /**
         * Creates and returns a new NanoflowParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NanoflowParameterMapping;
    }
    /**
     * In version 7.12.0: introduced
     */
    class NanoflowSource extends DataSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        get nanoflow(): microflows.INanoflow | null;
        set nanoflow(newValue: microflows.INanoflow | null);
        get nanoflowQualifiedName(): string | null;
        /**
         * In version 7.19.0: introduced
         */
        get parameterMappings(): internal.IList<NanoflowParameterMapping>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NanoflowSource instance in the SDK and on the server.
         * The new NanoflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.12.0 to 8.2.0
         */
        static createIn(container: EntityWidget): NanoflowSource;
        /**
         * Creates and returns a new NanoflowSource instance in the SDK and on the server.
         * The new NanoflowSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): NanoflowSource;
        /**
         * Creates and returns a new NanoflowSource instance in the SDK and on the server.
         * The new NanoflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.12.0 and higher
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): NanoflowSource;
        /**
         * Creates and returns a new NanoflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NanoflowSource;
    }
    /**
     * In version 8.0.0: introduced
     */
    interface INativeLayoutContent extends ILayoutContent {
        readonly model: IModel;
        readonly containerAsLayout: ILayout;
        /**
         * In version 8.5.0: introduced
         */
        readonly layoutType: NativeLayoutType;
        asLoaded(): NativeLayoutContent;
        load(callback: (element: NativeLayoutContent) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<NativeLayoutContent>;
    }
    /**
     * In version 8.0.0: introduced
     */
    class NativeLayoutContent extends LayoutContent implements INativeLayoutContent {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayout(): Layout;
        /**
         * In version 8.5.0: introduced
         */
        get layoutType(): NativeLayoutType;
        set layoutType(newValue: NativeLayoutType);
        get widgets(): internal.IList<Widget>;
        get rightHeaderPlaceholder(): Placeholder | null;
        set rightHeaderPlaceholder(newValue: Placeholder | null);
        /**
         * In version 8.2.0: introduced
         */
        get showBottomBar(): boolean;
        set showBottomBar(newValue: boolean);
        /**
         * In version 8.5.0: introduced
         */
        get sidebar(): boolean;
        set sidebar(newValue: boolean);
        /**
         * In version 8.5.0: introduced
         */
        get sidebarWidgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NativeLayoutContent instance in the SDK and on the server.
         * The new NativeLayoutContent will be automatically stored in the 'content' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createIn(container: Layout): NativeLayoutContent;
        /**
         * Creates and returns a new NativeLayoutContent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NativeLayoutContent;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/navigation-list relevant section in reference guide}
     */
    class NavigationList extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get items(): internal.IList<NavigationListItem>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationList;
    }
    class NavigationListItem extends ActionItem {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsNavigationList(): NavigationList;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        get conditionalVisibilitySettings(): ConditionalVisibilitySettings | null;
        set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * The new NavigationListItem will be automatically stored in the 'items' property
         * of the parent NavigationList element passed as argument.
         */
        static createIn(container: NavigationList): NavigationListItem;
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationListItem;
    }
    class NavigationSource extends MenuSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsMenuWidget(): MenuWidget;
        /**
         * In version 7.2.0: deleted
         */
        get profileType(): navigation.ProfileType;
        set profileType(newValue: navigation.ProfileType);
        /**
         * In version 7.2.0: introduced
         */
        get navigationProfile(): navigation.INavigationProfile;
        set navigationProfile(newValue: navigation.INavigationProfile);
        get navigationProfileQualifiedName(): string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * The new NavigationSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        static createIn(container: MenuWidget): NavigationSource;
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationSource;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/navigation-tree relevant section in reference guide}
     */
    class NavigationTree extends MenuWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationTree;
    }
    /**
     * In version 7.17.0: deleted
     */
    class NewButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 6.3.0: deleted
         */
        get entity(): domainmodels.IEntity | null;
        set entity(newValue: domainmodels.IEntity | null);
        get entityQualifiedName(): string | null;
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         * In version 6.3.0: introduced
         */
        get entityPath(): string;
        set entityPath(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get entityRef(): domainmodels.EntityRef | null;
        set entityRef(newValue: domainmodels.EntityRef | null);
        get pageSettings(): PageSettings;
        set pageSettings(newValue: PageSettings);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInDataViewUnderFooterWidgets(container: DataView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInDataViewUnderWidgets(container: DataView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInDivContainerUnderWidgets(container: DivContainer): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInHeaderUnderLeftWidgets(container: Header): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInHeaderUnderRightWidgets(container: Header): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInLayoutUnderWidgets(container: Layout): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInListViewUnderWidgets(container: ListView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInSnippetUnderWidgets(container: Snippet): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInTabPageUnderWidgets(container: TabPage): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInTableCellUnderWidgets(container: TableCell): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.16.0
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NewButton;
    }
    class NoClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDataViewActionButton(): DataViewActionButton;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container: ActionButton): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container: ActionItem): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container: DataViewActionButton): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container: ListView): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NoClientAction;
    }
    /**
     * In version 7.22.0: deleted
     */
    class OfflineSchema extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get role(): security.IUserRole | null;
        set role(newValue: security.IUserRole | null);
        get roleQualifiedName(): string | null;
        /**
         * In version 6.4.0: introduced
         */
        get tables(): internal.IList<string>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OfflineSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OfflineSchema;
    }
    /**
     * In version 7.22.0: deleted
     */
    class OfflineSchemaFetchInstruction extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get tableName(): string;
        set tableName(newValue: string);
        get xPath(): string;
        set xPath(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OfflineSchemaFetchInstruction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OfflineSchemaFetchInstruction;
    }
    /**
     * In version 7.18.0: deleted
     */
    abstract class OnClickBehavior extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 7.18.0: deleted
     */
    class OnClickEnlarge extends OnClickBehavior {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * The new OnClickEnlarge will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.17.0
         */
        static createIn(container: DynamicImageViewer): OnClickEnlarge;
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OnClickEnlarge;
    }
    /**
     * In version 7.18.0: deleted
     */
    class OnClickMicroflow extends OnClickBehavior {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get microflowSettings(): MicroflowSettings;
        set microflowSettings(newValue: MicroflowSettings);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * The new OnClickMicroflow will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.17.0
         */
        static createIn(container: DynamicImageViewer): OnClickMicroflow;
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OnClickMicroflow;
    }
    /**
     * In version 7.18.0: deleted
     */
    class OnClickNothing extends OnClickBehavior {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * The new OnClickNothing will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.17.0
         */
        static createIn(container: DynamicImageViewer): OnClickNothing;
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OnClickNothing;
    }
    /**
     * In version 7.3.0: introduced
     */
    class OpenLinkClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get linkType(): LinkType;
        set linkType(newValue: LinkType);
        get address(): StaticOrDynamicString;
        set address(newValue: StaticOrDynamicString);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInListViewUnderClickAction(container: ListView): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * The new OpenLinkClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): OpenLinkClientAction;
        /**
         * Creates and returns a new OpenLinkClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OpenLinkClientAction;
    }
    /**
     * In version 9.0.5: removed experimental
     * In version 9.0.2: introduced
     */
    class OpenUserTaskClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        /**
         * In version 9.20.0: introduced
         */
        get assignOnOpen(): boolean;
        set assignOnOpen(newValue: boolean);
        /**
         * In version 9.20.0: introduced
         */
        get openWhenAssigned(): boolean;
        set openWhenAssigned(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * The new OpenUserTaskClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): OpenUserTaskClientAction;
        /**
         * Creates and returns a new OpenUserTaskClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OpenUserTaskClientAction;
    }
    /**
     * In version 9.0.5: removed experimental
     * In version 9.0.2: introduced
     */
    class OpenWorkflowClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        /**
         * In version 9.0.5: introduced
         */
        get defaultPage(): IPage | null;
        set defaultPage(newValue: IPage | null);
        get defaultPageQualifiedName(): string | null;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * The new OpenWorkflowClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): OpenWorkflowClientAction;
        /**
         * Creates and returns a new OpenWorkflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OpenWorkflowClientAction;
    }
    /**
     * In version 10.2.0: introduced
     */
    class OptionDesignPropertyValue extends AbstractDesignPropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDesignPropertyValue(): DesignPropertyValue;
        get option(): string;
        set option(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OptionDesignPropertyValue instance in the SDK and on the server.
         * The new OptionDesignPropertyValue will be automatically stored in the 'value' property
         * of the parent DesignPropertyValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.2.0 and higher
         */
        static createIn(container: DesignPropertyValue): OptionDesignPropertyValue;
        /**
         * Creates and returns a new OptionDesignPropertyValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OptionDesignPropertyValue;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/page relevant section in reference guide}
     */
    interface IPage extends IFormBase {
        readonly model: IModel;
        readonly containerAsFolderBase: projects.IFolderBase;
        /**
         * In version 9.4.0: introduced
         */
        readonly parameters: internal.IList<IPageParameter>;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 7.17.0: added public
         */
        readonly layoutCall: ILayoutCall;
        /**
         * In version 7.23.0: added public
         */
        readonly allowedRoles: internal.IList<security.IModuleRole>;
        readonly allowedRolesQualifiedNames: string[];
        asLoaded(): Page;
        load(callback: (element: Page) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<Page>;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/page relevant section in reference guide}
     */
    class Page extends FormBase implements IPage {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsFolderBase(): projects.FolderBase;
        /**
         * In version 9.4.0: introduced
         */
        get parameters(): internal.IList<PageParameter>;
        /**
         * In version 7.17.0: added public
         */
        get layoutCall(): LayoutCall;
        set layoutCall(newValue: LayoutCall);
        get title(): texts.Text;
        set title(newValue: texts.Text);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        /**
         * In version 7.23.0: added public
         */
        get allowedRoles(): internal.IList<security.IModuleRole>;
        get allowedRolesQualifiedNames(): string[];
        /**
         * In version 6.7.0: introduced
         */
        get popupCloseAction(): string;
        set popupCloseAction(newValue: string);
        get popupWidth(): number;
        set popupWidth(newValue: number);
        get popupHeight(): number;
        set popupHeight(newValue: number);
        get popupResizable(): boolean;
        set popupResizable(newValue: boolean);
        get markAsUsed(): boolean;
        set markAsUsed(newValue: boolean);
        /**
         * In version 6.7.0: introduced
         */
        get url(): string;
        set url(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Page unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Page;
    }
    class PageClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDataViewActionButton(): DataViewActionButton;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get pageSettings(): PageSettings;
        set pageSettings(newValue: PageSettings);
        /**
         * In version 7.17.0: introduced
         */
        get pagesForSpecializations(): internal.IList<PageForSpecialization>;
        /**
         * In version 8.14.0: deleted
         * In version 8.11.0: introduced
         */
        get numberOfPagesToClose(): number;
        set numberOfPagesToClose(newValue: number);
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 8.14.0: introduced
         */
        get numberOfPagesToClose2(): string;
        set numberOfPagesToClose2(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container: ActionButton): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container: ActionItem): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container: DataViewActionButton): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container: ListView): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageClientAction;
    }
    class PageForSpecialization extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsGridEditButton(): GridEditButton;
        get containerAsPageClientAction(): PageClientAction;
        get entity(): domainmodels.IEntity;
        set entity(newValue: domainmodels.IEntity);
        get entityQualifiedName(): string;
        get pageSettings(): PageSettings;
        set pageSettings(newValue: PageSettings);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
         * of the parent GridEditButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.16.0
         */
        static createInGridEditButtonUnderPagesForSpecializations(container: GridEditButton): PageForSpecialization;
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
         * of the parent PageClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInPageClientActionUnderPagesForSpecializations(container: PageClientAction): PageForSpecialization;
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageForSpecialization;
    }
    /**
     * In version 9.4.0: introduced
     */
    interface IPageParameter extends internal.IElement, internal.IByNameReferrable {
        readonly model: IModel;
        readonly containerAsPage: IPage;
        readonly name: string;
        /**
         * This property is required and cannot be set to null.
         */
        readonly parameterType: datatypes.IDataType;
        asLoaded(): PageParameter;
        load(callback: (element: PageParameter) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<PageParameter>;
    }
    /**
     * In version 9.4.0: introduced
     */
    class PageParameter extends internal.Element<IModel> implements IPageParameter {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPage(): Page;
        get name(): string;
        set name(newValue: string);
        get parameterType(): datatypes.DataType;
        set parameterType(newValue: datatypes.DataType);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageParameter instance in the SDK and on the server.
         * The new PageParameter will be automatically stored in the 'parameters' property
         * of the parent Page element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.4.0 and higher
         */
        static createIn(container: Page): PageParameter;
        /**
         * Creates and returns a new PageParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageParameter;
        get qualifiedName(): string | null;
    }
    /**
     * In version 9.7.0: introduced
     */
    class PageParameterMapping extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageSettings(): PageSettings;
        get parameter(): IPageParameter;
        set parameter(newValue: IPageParameter);
        get parameterQualifiedName(): string;
        get variable(): PageVariable;
        set variable(newValue: PageVariable);
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         */
        get argument(): string;
        set argument(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageParameterMapping instance in the SDK and on the server.
         * The new PageParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent PageSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.7.0 and higher
         */
        static createIn(container: PageSettings): PageParameterMapping;
        /**
         * Creates and returns a new PageParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageParameterMapping;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/on-click-event relevant section in reference guide}
     */
    class PageSettings extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsShowPageAction(): microflows.ShowPageAction;
        get containerAsNavigationProfile(): navigation.NavigationProfile;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsCreateObjectClientAction(): CreateObjectClientAction;
        get containerAsDataGridAddButton(): DataGridAddButton;
        get containerAsGridEditButton(): GridEditButton;
        get containerAsGridNewButton(): GridNewButton;
        get containerAsNewButton(): NewButton;
        get containerAsPageClientAction(): PageClientAction;
        get containerAsPageForSpecialization(): PageForSpecialization;
        get containerAsReferenceSelector(): ReferenceSelector;
        get page(): IPage | null;
        set page(newValue: IPage | null);
        get pageQualifiedName(): string | null;
        /**
         * In version 8.12.0: deleted
         */
        get formTitle(): texts.Text | null;
        set formTitle(newValue: texts.Text | null);
        /**
         * In version 8.12.0: introduced
         */
        get titleOverride(): microflows.TextTemplate | null;
        set titleOverride(newValue: microflows.TextTemplate | null);
        /**
         * In version 8.0.0: deleted
         */
        get location(): FormLocation;
        set location(newValue: FormLocation);
        /**
         * In version 9.7.0: introduced
         */
        get parameterMappings(): internal.IList<PageParameterMapping>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent microflows.ShowPageAction element passed as argument.
         */
        static createInShowPageActionUnderPageSettings(container: microflows.ShowPageAction): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'loginPageSettings' property
         * of the parent navigation.NavigationProfile element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInNavigationProfileUnderLoginPageSettings(container: navigation.NavigationProfile): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'selectPageSettings' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createInAssociationWidgetUnderSelectPageSettings(container: AssociationWidget): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent CreateObjectClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.17.0 and higher
         */
        static createInCreateObjectClientActionUnderPageSettings(container: CreateObjectClientAction): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent DataGridAddButton element passed as argument.
         */
        static createInDataGridAddButtonUnderPageSettings(container: DataGridAddButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridEditButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.16.0
         */
        static createInGridEditButtonUnderPageSettings(container: GridEditButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridNewButton element passed as argument.
         */
        static createInGridNewButtonUnderPageSettings(container: GridNewButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent NewButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.16.0
         */
        static createInNewButtonUnderPageSettings(container: NewButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageClientAction element passed as argument.
         */
        static createInPageClientActionUnderPageSettings(container: PageClientAction): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageForSpecialization element passed as argument.
         */
        static createInPageForSpecializationUnderPageSettings(container: PageForSpecialization): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'gotoPageSettings' property
         * of the parent ReferenceSelector element passed as argument.
         */
        static createInReferenceSelectorUnderGotoPageSettings(container: ReferenceSelector): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageSettings;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/page-templates relevant section in reference guide}
     *
     * In version 7.7.0: introduced
     */
    interface IPageTemplate extends ITemplateFormBase {
        readonly model: IModel;
        readonly containerAsFolderBase: projects.IFolderBase;
        /**
         * In version 8.13.0: deleted
         * In version 7.17.0: added public
         */
        readonly type: PageTemplateType;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 7.17.0: added public
         */
        readonly layoutCall: ILayoutCall;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 8.13.0: introduced
         */
        readonly templateType: ITemplateType;
        asLoaded(): PageTemplate;
        load(callback: (element: PageTemplate) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<PageTemplate>;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/page-templates relevant section in reference guide}
     *
     * In version 7.7.0: introduced
     */
    class PageTemplate extends TemplateFormBase implements IPageTemplate {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsFolderBase(): projects.FolderBase;
        /**
         * In version 8.13.0: deleted
         * In version 7.17.0: added public
         */
        get type(): PageTemplateType;
        set type(newValue: PageTemplateType);
        /**
         * In version 7.17.0: added public
         */
        get layoutCall(): LayoutCall;
        set layoutCall(newValue: LayoutCall);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        /**
         * In version 8.13.0: introduced
         */
        get templateType(): TemplateType;
        set templateType(newValue: TemplateType);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new PageTemplate unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): PageTemplate;
    }
    /**
     * In version 8.4.0: introduced
     */
    class PageVariable extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsClientTemplateParameter(): ClientTemplateParameter;
        get containerAsConditionalSettings(): ConditionalSettings;
        get containerAsDeleteClientAction(): DeleteClientAction;
        get containerAsEntityPathSource(): EntityPathSource;
        get containerAsMicroflowParameterMapping(): MicroflowParameterMapping;
        get containerAsNanoflowParameterMapping(): NanoflowParameterMapping;
        get containerAsPageParameterMapping(): PageParameterMapping;
        get containerAsSnippetParameterMapping(): SnippetParameterMapping;
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        get widgetLocalName(): string | null;
        /**
         * In version 9.5.0: introduced
         */
        get pageParameter(): PageParameter | null;
        set pageParameter(newValue: PageParameter | null);
        get pageParameterLocalName(): string | null;
        /**
         * In version 9.21.0: introduced
         */
        get snippetParameter(): SnippetParameter | null;
        set snippetParameter(newValue: SnippetParameter | null);
        get snippetParameterLocalName(): string | null;
        get useAllPages(): boolean;
        set useAllPages(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'sourceVariable' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.8.0 and higher
         */
        static createInWidgetValueUnderSourceVariable(container: customwidgets.WidgetValue): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'sourceVariable' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInAssociationWidgetUnderSourceVariable(container: AssociationWidget): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'sourceVariable' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.8.0 and higher
         */
        static createInAttributeWidgetUnderSourceVariable(container: AttributeWidget): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'sourceVariable' property
         * of the parent ClientTemplateParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInClientTemplateParameterUnderSourceVariable(container: ClientTemplateParameter): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'sourceVariable' property
         * of the parent ConditionalSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.24.0 and higher
         */
        static createInConditionalSettingsUnderSourceVariable(container: ConditionalSettings): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'sourceVariable' property
         * of the parent DeleteClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.4.0 and higher
         */
        static createInDeleteClientActionUnderSourceVariable(container: DeleteClientAction): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'sourceVariable' property
         * of the parent EntityPathSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.0.0 and higher
         */
        static createInEntityPathSourceUnderSourceVariable(container: EntityPathSource): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'variable' property
         * of the parent MicroflowParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.4.0 and higher
         */
        static createInMicroflowParameterMappingUnderVariable(container: MicroflowParameterMapping): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'variable' property
         * of the parent NanoflowParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.4.0 and higher
         */
        static createInNanoflowParameterMappingUnderVariable(container: NanoflowParameterMapping): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'variable' property
         * of the parent PageParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.7.0 and higher
         */
        static createInPageParameterMappingUnderVariable(container: PageParameterMapping): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * The new PageVariable will be automatically stored in the 'variable' property
         * of the parent SnippetParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.21.0 and higher
         */
        static createInSnippetParameterMappingUnderVariable(container: SnippetParameterMapping): PageVariable;
        /**
         * Creates and returns a new PageVariable instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageVariable;
    }
    /**
     * In version 10.0.0: introduced
     */
    class ParameterAttributeUrlSegment extends url.UrlSegment {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get pageParameter(): PageParameter;
        set pageParameter(newValue: PageParameter);
        get pageParameterLocalName(): string;
        get attribute(): domainmodels.IAttribute;
        set attribute(newValue: domainmodels.IAttribute);
        get attributeQualifiedName(): string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ParameterAttributeUrlSegment instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ParameterAttributeUrlSegment;
    }
    /**
     * In version 10.0.0: introduced
     */
    class ParameterIdUrlSegment extends url.UrlSegment {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get pageParameter(): PageParameter;
        set pageParameter(newValue: PageParameter);
        get pageParameterLocalName(): string;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ParameterIdUrlSegment instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ParameterIdUrlSegment;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/password-text-box relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class PasswordTextBox extends LoginTextBox {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * The new PasswordTextBox will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): PasswordTextBox;
        /**
         * Creates and returns a new PasswordTextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PasswordTextBox;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/placeholder relevant section in reference guide}
     */
    class Placeholder extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'rightHeaderPlaceholder' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderRightHeaderPlaceholder(container: NativeLayoutContent): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Placeholder;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/radio-buttons relevant section in reference guide}
     */
    class RadioButtonGroup extends AttributeWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get renderHorizontal(): boolean;
        set renderHorizontal(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RadioButtonGroup;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/search-bar relevant section in reference guide}
     */
    class RangeSearchField extends SearchField {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get lowerBound(): string;
        set lowerBound(newValue: string);
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get upperBound(): string;
        set upperBound(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get lowerBoundRef(): domainmodels.AttributeRef | null;
        set lowerBoundRef(newValue: domainmodels.AttributeRef | null);
        /**
         * In version 7.11.0: introduced
         */
        get upperBoundRef(): domainmodels.AttributeRef | null;
        set upperBoundRef(newValue: domainmodels.AttributeRef | null);
        get includeLower(): boolean;
        set includeLower(newValue: boolean);
        get includeUpper(): boolean;
        set includeUpper(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * The new RangeSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): RangeSearchField;
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RangeSearchField;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/reference-selector relevant section in reference guide}
     */
    class ReferenceSelector extends AssociationWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.6.0: deleted
         */
        get required(): boolean;
        set required(newValue: boolean);
        /**
         * In version 7.6.0: deleted
         */
        get requiredMessage(): texts.Text;
        set requiredMessage(newValue: texts.Text);
        /**
         * In version 7.6.0: introduced
         */
        get validation(): WidgetValidation;
        set validation(newValue: WidgetValidation);
        get renderMode(): ReferenceSelectorRenderModeType;
        set renderMode(newValue: ReferenceSelectorRenderModeType);
        get gotoPageSettings(): PageSettings;
        set gotoPageSettings(newValue: PageSettings);
        get formattingInfo(): FormattingInfo;
        set formattingInfo(newValue: FormattingInfo);
        /**
         * In version 7.2.0: introduced
         */
        get emptyOptionCaption(): texts.Text;
        set emptyOptionCaption(newValue: texts.Text);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ReferenceSelector;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/reference-set-selector relevant section in reference guide}
     */
    class ReferenceSetSelector extends ColumnGrid {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 7.13.0: deleted
         */
        get onChangeMicroflowSettings(): MicroflowSettings;
        set onChangeMicroflowSettings(newValue: MicroflowSettings);
        /**
         * In version 7.13.0: introduced
         */
        get onChangeAction(): ClientAction;
        set onChangeAction(newValue: ClientAction);
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         */
        get constrainedBy(): internal.IList<string>;
        /**
         * In version 7.11.0: introduced
         */
        get constrainedByRefs(): internal.IList<domainmodels.EntityRef>;
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint(): string;
        set xPathConstraint(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get removeAllFromContext(): boolean;
        set removeAllFromContext(newValue: boolean);
        /**
         * In version 8.0.0: deleted
         */
        get removeFromContextEntities(): internal.IList<domainmodels.IEntity>;
        get removeFromContextEntitiesQualifiedNames(): string[];
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ReferenceSetSelector;
    }
    class ReferenceSetSource extends GridBaseSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsEntityWidget(): EntityWidget;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 8.2.0
         */
        static createIn(container: EntityWidget): ReferenceSetSource;
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInWidgetValueUnderDataSource(container: customwidgets.WidgetValue): ReferenceSetSource;
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createInEntityWidgetUnderDataSource(container: EntityWidget): ReferenceSetSource;
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ReferenceSetSource;
    }
    /**
     * In version 8.13.0: introduced
     */
    interface IRegularPageTemplateType extends ITemplateType {
        readonly model: IModel;
        readonly containerAsPageTemplate: IPageTemplate;
        asLoaded(): RegularPageTemplateType;
        load(callback: (element: RegularPageTemplateType) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<RegularPageTemplateType>;
    }
    /**
     * In version 8.13.0: introduced
     */
    class RegularPageTemplateType extends TemplateType implements IRegularPageTemplateType {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageTemplate(): PageTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RegularPageTemplateType instance in the SDK and on the server.
         * The new RegularPageTemplateType will be automatically stored in the 'templateType' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createIn(container: PageTemplate): RegularPageTemplateType;
        /**
         * Creates and returns a new RegularPageTemplateType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RegularPageTemplateType;
    }
    /**
     * In version 10.1.0: deleted
     * In version 7.12.0: introduced
     */
    class RetrievalQuery extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get queryId(): string;
        set queryId(newValue: string);
        /**
         * In version 9.21.0: deleted
         */
        get allowedUserRoles(): internal.IList<security.IUserRole>;
        get allowedUserRolesQualifiedNames(): string[];
        /**
         * In version 9.21.0: introduced
         */
        get allowedUserRoleSets(): internal.IList<UserRoleSet>;
        get xPath(): string;
        set xPath(newValue: string);
        /**
         * In version 7.21.0: introduced
         */
        get microflow(): microflows.IMicroflow | null;
        set microflow(newValue: microflows.IMicroflow | null);
        get microflowQualifiedName(): string | null;
        /**
         * In version 7.21.0: introduced
         */
        get entityPath(): string;
        set entityPath(newValue: string);
        /**
         * In version 7.14.0: introduced
         */
        get pageName(): string;
        set pageName(newValue: string);
        /**
         * In version 8.4.0: introduced
         */
        get widgetName(): string;
        set widgetName(newValue: string);
        /**
         * In version 8.4.0: introduced
         */
        get usedAssociations(): internal.IList<string>;
        /**
         * In version 8.11.0: introduced
         */
        get usedAttributes(): internal.IList<string>;
        /**
         * In version 8.4.0: deleted
         */
        get schemaId(): string;
        set schemaId(newValue: string);
        /**
         * In version 8.6.0: introduced
         */
        get parameters(): internal.IList<RetrievalQueryParameter>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RetrievalQuery instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RetrievalQuery;
    }
    /**
     * In version 10.1.0: deleted
     * In version 8.6.0: introduced
     */
    class RetrievalQueryParameter extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsRetrievalQuery(): RetrievalQuery;
        get containerAsRuntimeOperation(): RuntimeOperation;
        get name(): string;
        set name(newValue: string);
        /**
         * In version 10.0.0: deleted
         */
        get type(): string;
        set type(newValue: string);
        /**
         * In version 10.0.0: introduced
         */
        get types(): internal.IList<string>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RetrievalQueryParameter instance in the SDK and on the server.
         * The new RetrievalQueryParameter will be automatically stored in the 'parameters' property
         * of the parent RetrievalQuery element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.6.0 to 9.16.0
         */
        static createIn(container: RetrievalQuery): RetrievalQueryParameter;
        /**
         * Creates and returns a new RetrievalQueryParameter instance in the SDK and on the server.
         * The new RetrievalQueryParameter will be automatically stored in the 'parameters' property
         * of the parent RetrievalQuery element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.6.0 to 10.0.0
         */
        static createInRetrievalQueryUnderParameters(container: RetrievalQuery): RetrievalQueryParameter;
        /**
         * Creates and returns a new RetrievalQueryParameter instance in the SDK and on the server.
         * The new RetrievalQueryParameter will be automatically stored in the 'parameters' property
         * of the parent RuntimeOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.17.0 to 10.0.0
         */
        static createInRuntimeOperationUnderParameters(container: RuntimeOperation): RetrievalQueryParameter;
        /**
         * Creates and returns a new RetrievalQueryParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RetrievalQueryParameter;
    }
    /**
     * In version 8.4.0: deleted
     * In version 6.2.0: introduced
     */
    class RetrievalSchema extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        /**
         * In version 7.2.0: deleted
         */
        get usedAttributes(): internal.IList<string>;
        /**
         * In version 7.2.0: introduced
         */
        get usedAssociations(): internal.IList<string>;
        /**
         * In version 7.14.0: introduced
         */
        get widgetName(): string;
        set widgetName(newValue: string);
        /**
         * In version 7.4.0: deleted
         */
        get entity(): string;
        set entity(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RetrievalSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RetrievalSchema;
    }
    /**
     * In version 10.1.0: deleted
     * In version 9.17.0: introduced
     */
    class RuntimeOperation extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get operationId(): string;
        set operationId(newValue: string);
        get parameters(): internal.IList<RetrievalQueryParameter>;
        /**
         * In version 9.24.0: introduced
         */
        get constants(): internal.IList<NamedValue>;
        get operationType(): string;
        set operationType(newValue: string);
        /**
         * In version 9.24.0: deleted
         * In version 9.20.0: introduced
         */
        get operationName(): string;
        set operationName(newValue: string);
        /**
         * In version 9.21.0: deleted
         * In version 9.18.0: introduced
         */
        get allowedUserRoles(): internal.IList<security.IUserRole>;
        get allowedUserRolesQualifiedNames(): string[];
        /**
         * In version 9.21.0: introduced
         */
        get allowedUserRoleSets(): internal.IList<UserRoleSet>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RuntimeOperation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RuntimeOperation;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide6/save-button relevant section in reference guide}
     *
     * In version 7.0.2: deleted
     */
    class SaveButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 6.6.0: introduced
         */
        get syncAutomatically(): boolean;
        set syncAutomatically(newValue: boolean);
        /**
         * In version 6.7.0: introduced
         */
        get closePage(): boolean;
        set closePage(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container: DataView): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container: DivContainer): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container: Header): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container: Header): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container: Layout): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container: ListView): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container: Snippet): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container: TabPage): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container: TableCell): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SaveButton;
    }
    /**
     * In version 7.0.2: introduced
     */
    class SaveChangesClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        get syncAutomatically(): boolean;
        set syncAutomatically(newValue: boolean);
        get closePage(): boolean;
        set closePage(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * The new SaveChangesClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): SaveChangesClientAction;
        /**
         * Creates and returns a new SaveChangesClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SaveChangesClientAction;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/scroll-container relevant section in reference guide}
     */
    class ScrollContainer extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get center(): ScrollContainerRegion;
        set center(newValue: ScrollContainerRegion);
        get left(): ScrollContainerRegion | null;
        set left(newValue: ScrollContainerRegion | null);
        get right(): ScrollContainerRegion | null;
        set right(newValue: ScrollContainerRegion | null);
        get top(): ScrollContainerRegion | null;
        set top(newValue: ScrollContainerRegion | null);
        get bottom(): ScrollContainerRegion | null;
        set bottom(newValue: ScrollContainerRegion | null);
        get layoutMode(): LayoutModeType;
        set layoutMode(newValue: LayoutModeType);
        get widthMode(): SizeMode;
        set widthMode(newValue: SizeMode);
        get width(): number;
        set width(newValue: number);
        get alignment(): AlignmentEnum;
        set alignment(newValue: AlignmentEnum);
        get scrollBehavior(): ScrollBehavior;
        set scrollBehavior(newValue: ScrollBehavior);
        /**
         * In version 9.11.0: introduced
         */
        get nativeHideScrollbars(): boolean;
        set nativeHideScrollbars(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ScrollContainer;
    }
    class ScrollContainerRegion extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsScrollContainer(): ScrollContainer;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        get sizeMode(): SizeMode;
        set sizeMode(newValue: SizeMode);
        get size(): number;
        set size(newValue: number);
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        /**
         * In version 6.10.0: introduced
         */
        get toggleMode(): ToggleMode;
        set toggleMode(newValue: ToggleMode);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'bottom' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderBottom(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'center' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderCenter(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'left' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderLeft(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'right' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderRight(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'top' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderTop(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ScrollContainerRegion;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/search-bar relevant section in reference guide}
     */
    class SearchBar extends ControlBar {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsGridBaseSource(): GridBaseSource;
        get containerAsGridDatabaseSource(): GridDatabaseSource;
        get type(): SearchBarTypeEnum;
        set type(newValue: SearchBarTypeEnum);
        get waitForSearch(): boolean;
        set waitForSearch(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridBaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.5.0 and higher
         */
        static createIn(container: GridBaseSource): SearchBar;
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridBaseSource element passed as argument.
         */
        static createInGridBaseSourceUnderSearchBar(container: GridBaseSource): SearchBar;
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 10.4.0
         */
        static createInGridDatabaseSourceUnderSearchBar(container: GridDatabaseSource): SearchBar;
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SearchBar;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/control-bar relevant section in reference guide}
     */
    class SelectButton extends GridControlBarButton {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsControlBar(): ControlBar;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * The new SelectButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): SelectButton;
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectButton;
    }
    /**
     * In version 8.13.0: introduced
     */
    interface ISelectPageTemplateType extends ITemplateType {
        readonly model: IModel;
        readonly containerAsPageTemplate: IPageTemplate;
        asLoaded(): SelectPageTemplateType;
        load(callback: (element: SelectPageTemplateType) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<SelectPageTemplateType>;
    }
    /**
     * In version 8.13.0: introduced
     */
    class SelectPageTemplateType extends TemplateType implements ISelectPageTemplateType {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageTemplate(): PageTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectPageTemplateType instance in the SDK and on the server.
         * The new SelectPageTemplateType will be automatically stored in the 'templateType' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createIn(container: PageTemplate): SelectPageTemplateType;
        /**
         * Creates and returns a new SelectPageTemplateType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectPageTemplateType;
    }
    abstract class SelectorSource extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsAssociationWidget(): AssociationWidget;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 10.5.0: deleted
     * In version 6.1.0: introduced
     */
    class SelectorDatabaseSource extends SelectorSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsAssociationWidget(): AssociationWidget;
        get databaseConstraints(): internal.IList<DatabaseConstraint>;
        /**
         * In version 6.2.0: introduced
         */
        get sortBar(): GridSortBar;
        set sortBar(newValue: GridSortBar);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * The new SelectorDatabaseSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0 to 10.4.0
         */
        static createIn(container: AssociationWidget): SelectorDatabaseSource;
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectorDatabaseSource;
    }
    class SelectorMicroflowSource extends SelectorSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsAssociationWidget(): AssociationWidget;
        get dataSourceMicroflowSettings(): MicroflowSettings;
        set dataSourceMicroflowSettings(newValue: MicroflowSettings);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * The new SelectorMicroflowSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createIn(container: AssociationWidget): SelectorMicroflowSource;
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectorMicroflowSource;
    }
    class SelectorXPathSource extends SelectorSource {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsAssociationWidget(): AssociationWidget;
        get sortBar(): GridSortBar;
        set sortBar(newValue: GridSortBar);
        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        get xPathConstraint(): string;
        set xPathConstraint(newValue: string);
        /**
         * The value of this property is conceptually of type paths.LegacyEntityPath.
         *
         * In version 7.11.0: deleted
         */
        get constrainedBy(): internal.IList<string>;
        /**
         * In version 7.11.0: introduced
         */
        get constrainedByRefs(): internal.IList<domainmodels.EntityRef>;
        /**
         * In version 8.0.0: deleted
         */
        get applyContext(): boolean;
        set applyContext(newValue: boolean);
        /**
         * In version 8.0.0: deleted
         */
        get removeAllFromContext(): boolean;
        set removeAllFromContext(newValue: boolean);
        /**
         * In version 8.0.0: deleted
         */
        get removeFromContextEntities(): internal.IList<domainmodels.IEntity>;
        get removeFromContextEntitiesQualifiedNames(): string[];
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * The new SelectorXPathSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createIn(container: AssociationWidget): SelectorXPathSource;
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectorXPathSource;
    }
    /**
     * In version 9.0.5: removed experimental
     * In version 9.0.2: introduced
     */
    class SetTaskOutcomeClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        /**
         * In version 9.19.0: deleted
         */
        get outcome(): workflows.IUserTaskOutcome | null;
        set outcome(newValue: workflows.IUserTaskOutcome | null);
        get outcomeQualifiedName(): string | null;
        /**
         * In version 9.19.0: introduced
         */
        get outcomeValue(): string;
        set outcomeValue(newValue: string);
        get closePage(): boolean;
        set closePage(newValue: boolean);
        get commit(): boolean;
        set commit(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * The new SetTaskOutcomeClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): SetTaskOutcomeClientAction;
        /**
         * Creates and returns a new SetTaskOutcomeClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SetTaskOutcomeClientAction;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/sidebar-toggle-button relevant section in reference guide}
     */
    class SidebarToggleButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 6.10.0: deleted
         */
        get region(): SidebarToggleRegion;
        set region(newValue: SidebarToggleRegion);
        /**
         * In version 6.10.0: deleted
         */
        get mode(): SidebarToggleMode;
        set mode(newValue: SidebarToggleMode);
        /**
         * In version 6.10.0: deleted
         */
        get initiallyOpen(): boolean;
        set initiallyOpen(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SidebarToggleButton;
    }
    /**
     * In version 7.1.0: introduced
     */
    class SignOutClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInListViewUnderClickAction(container: ListView): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * The new SignOutClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): SignOutClientAction;
        /**
         * Creates and returns a new SignOutClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SignOutClientAction;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/simple-menu-bar relevant section in reference guide}
     */
    class SimpleMenuBar extends MenuWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get orientation(): SimpleMenuBarOrientation;
        set orientation(newValue: SimpleMenuBarOrientation);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SimpleMenuBar;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/snippet relevant section in reference guide}
     */
    interface ISnippet extends IFormBase {
        readonly model: IModel;
        readonly containerAsFolderBase: projects.IFolderBase;
        /**
         * In version 9.21.0: deleted
         */
        readonly entity: domainmodels.IEntity | null;
        readonly entityQualifiedName: string | null;
        /**
         * In version 8.4.0: added public
         * In version 8.0.0: introduced
         */
        readonly type: SnippetType;
        /**
         * In version 9.21.0: introduced
         */
        readonly parameters: internal.IList<ISnippetParameter>;
        asLoaded(): Snippet;
        load(callback: (element: Snippet) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<Snippet>;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/snippet relevant section in reference guide}
     */
    class Snippet extends FormBase implements ISnippet {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsFolderBase(): projects.FolderBase;
        /**
         * In version 9.21.0: deleted
         */
        get entity(): domainmodels.IEntity | null;
        set entity(newValue: domainmodels.IEntity | null);
        get entityQualifiedName(): string | null;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 8.4.0: added public
         * In version 8.0.0: introduced
         */
        get type(): SnippetType;
        set type(newValue: SnippetType);
        /**
         * In version 9.21.0: introduced
         */
        get parameters(): internal.IList<SnippetParameter>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Snippet unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Snippet;
    }
    class SnippetCall extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsSnippetCallWidget(): SnippetCallWidget;
        get snippet(): ISnippet | null;
        set snippet(newValue: ISnippet | null);
        get snippetQualifiedName(): string | null;
        /**
         * In version 9.21.0: introduced
         */
        get parameterMappings(): internal.IList<SnippetParameterMapping>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * The new SnippetCall will be automatically stored in the 'snippetCall' property
         * of the parent SnippetCallWidget element passed as argument.
         */
        static createIn(container: SnippetCallWidget): SnippetCall;
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SnippetCall;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/snippet-call relevant section in reference guide}
     */
    class SnippetCallWidget extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get snippetCall(): SnippetCall;
        set snippetCall(newValue: SnippetCall);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SnippetCallWidget;
    }
    /**
     * In version 9.21.0: introduced
     */
    interface ISnippetParameter extends internal.IElement, internal.IByNameReferrable {
        readonly model: IModel;
        readonly containerAsSnippet: ISnippet;
        readonly name: string;
        /**
         * This property is required and cannot be set to null.
         */
        readonly parameterType: datatypes.IDataType;
        asLoaded(): SnippetParameter;
        load(callback: (element: SnippetParameter) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<SnippetParameter>;
    }
    /**
     * In version 9.21.0: introduced
     */
    class SnippetParameter extends internal.Element<IModel> implements ISnippetParameter {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsSnippet(): Snippet;
        get name(): string;
        set name(newValue: string);
        get parameterType(): datatypes.DataType;
        set parameterType(newValue: datatypes.DataType);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SnippetParameter instance in the SDK and on the server.
         * The new SnippetParameter will be automatically stored in the 'parameters' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.21.0 and higher
         */
        static createIn(container: Snippet): SnippetParameter;
        /**
         * Creates and returns a new SnippetParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SnippetParameter;
        get qualifiedName(): string | null;
    }
    /**
     * In version 9.21.0: introduced
     */
    class SnippetParameterMapping extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsSnippetCall(): SnippetCall;
        get parameter(): ISnippetParameter;
        set parameter(newValue: ISnippetParameter);
        get parameterQualifiedName(): string;
        get variable(): PageVariable;
        set variable(newValue: PageVariable);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SnippetParameterMapping instance in the SDK and on the server.
         * The new SnippetParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent SnippetCall element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.21.0 and higher
         */
        static createIn(container: SnippetCall): SnippetParameterMapping;
        /**
         * Creates and returns a new SnippetParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SnippetParameterMapping;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/image relevant section in reference guide}
     */
    class StaticImageViewer extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get image(): images.IImage | null;
        set image(newValue: images.IImage | null);
        get imageQualifiedName(): string | null;
        get widthUnit(): ImageSizeUnit;
        set widthUnit(newValue: ImageSizeUnit);
        get heightUnit(): ImageSizeUnit;
        set heightUnit(newValue: ImageSizeUnit);
        get width(): number;
        set width(newValue: number);
        get height(): number;
        set height(newValue: number);
        get clickAction(): ClientAction;
        set clickAction(newValue: ClientAction);
        get responsive(): boolean;
        set responsive(newValue: boolean);
        /**
         * In version 8.6.0: introduced
         */
        get alternativeText(): ClientTemplate;
        set alternativeText(newValue: ClientTemplate);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StaticImageViewer;
    }
    class StaticOrDynamicString extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLinkButton(): LinkButton;
        get containerAsOpenLinkClientAction(): OpenLinkClientAction;
        get isDynamic(): boolean;
        set isDynamic(newValue: boolean);
        get value(): string;
        set value(newValue: string);
        /**
         * The value of this property is conceptually of type paths.LegacyAttributePath.
         *
         * In version 7.11.0: deleted
         */
        get attribute(): string;
        set attribute(newValue: string);
        /**
         * In version 7.11.0: introduced
         */
        get attributeRef(): domainmodels.AttributeRef | null;
        set attributeRef(newValue: domainmodels.AttributeRef | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * The new StaticOrDynamicString will be automatically stored in the 'address' property
         * of the parent LinkButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.2.0
         */
        static createInLinkButtonUnderAddress(container: LinkButton): StaticOrDynamicString;
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * The new StaticOrDynamicString will be automatically stored in the 'address' property
         * of the parent OpenLinkClientAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.3.0 and higher
         */
        static createInOpenLinkClientActionUnderAddress(container: OpenLinkClientAction): StaticOrDynamicString;
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StaticOrDynamicString;
    }
    /**
     * In version 10.1.0: deleted
     * In version 10.0.0: introduced
     */
    abstract class UrlSegment extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 10.1.0: deleted
     * In version 10.0.0: introduced
     */
    class StaticUrlSegment extends UrlSegment {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get segment(): string;
        set segment(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StaticUrlSegment instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StaticUrlSegment;
    }
    /**
     * In version 7.0.2: deleted
     */
    class SyncButton extends Button {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDataViewUnderWidget(container: DataView): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInDivContainerUnderWidget(container: DivContainer): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderLeftWidget(container: Header): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInHeaderUnderRightWidget(container: Header): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutUnderWidget(container: Layout): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewUnderWidget(container: ListView): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSnippetUnderWidget(container: Snippet): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTabPageUnderWidget(container: TabPage): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTableCellUnderWidget(container: TableCell): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.0.1
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SyncButton;
    }
    /**
     * In version 7.0.2: introduced
     */
    class SyncClientAction extends ClientAction {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsMenuItem(): menus.MenuItem;
        get containerAsBottomBarItem(): nativepages.BottomBarItem;
        get containerAsActionButton(): ActionButton;
        get containerAsActionItem(): ActionItem;
        get containerAsAssociationWidget(): AssociationWidget;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsDivContainer(): DivContainer;
        get containerAsDynamicImageViewer(): DynamicImageViewer;
        get containerAsGridActionButton(): GridActionButton;
        get containerAsListView(): ListView;
        get containerAsReferenceSetSelector(): ReferenceSetSelector;
        get containerAsStaticImageViewer(): StaticImageViewer;
        get containerAsTextBox(): TextBox;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.19.0 and higher
         */
        static createInWidgetValueUnderAction(container: customwidgets.WidgetValue): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent nativepages.BottomBarItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 to 8.14.0
         */
        static createInBottomBarItemUnderAction(container: nativepages.BottomBarItem): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionButtonUnderAction(container: ActionButton): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInActionItemUnderAction(container: ActionItem): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAssociationWidgetUnderOnChangeAction(container: AssociationWidget): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnChangeAction(container: AttributeWidget): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onEnterAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnEnterAction(container: AttributeWidget): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onLeaveAction' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInAttributeWidgetUnderOnLeaveAction(container: AttributeWidget): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onClickAction' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.3.0 and higher
         */
        static createInDivContainerUnderOnClickAction(container: DivContainer): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'clickAction' property
         * of the parent DynamicImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.18.0 and higher
         */
        static createInDynamicImageViewerUnderClickAction(container: DynamicImageViewer): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInListViewUnderClickAction(container: ListView): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'pullDownAction' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInListViewUnderPullDownAction(container: ListView): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onChangeAction' property
         * of the parent ReferenceSetSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.13.0 and higher
         */
        static createInReferenceSetSelectorUnderOnChangeAction(container: ReferenceSetSelector): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 and higher
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * The new SyncClientAction will be automatically stored in the 'onEnterKeyPressAction' property
         * of the parent TextBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.7.0 and higher
         */
        static createInTextBoxUnderOnEnterKeyPressAction(container: TextBox): SyncClientAction;
        /**
         * Creates and returns a new SyncClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SyncClientAction;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/tab-container relevant section in reference guide}
     */
    class TabContainer extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get tabPages(): internal.IList<TabPage>;
        get defaultPage(): TabPage | null;
        set defaultPage(newValue: TabPage | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TabContainer;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/tab-container relevant section in reference guide}
     */
    class TabPage extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsTabContainer(): TabContainer;
        get name(): string;
        set name(newValue: string);
        get caption(): texts.Text;
        set caption(newValue: texts.Text);
        get refreshOnShow(): boolean;
        set refreshOnShow(newValue: boolean);
        get conditionalVisibilitySettings(): ConditionalVisibilitySettings | null;
        set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings | null);
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        /**
         * In version 8.13.0: introduced
         */
        get badge(): ClientTemplate | null;
        set badge(newValue: ClientTemplate | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * The new TabPage will be automatically stored in the 'tabPages' property
         * of the parent TabContainer element passed as argument.
         */
        static createIn(container: TabContainer): TabPage;
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TabPage;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/table relevant section in reference guide}
     */
    class Table extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get cells(): internal.IList<TableCell>;
        get columns(): internal.IList<TableColumn>;
        get widthUnit(): UnitEnum;
        set widthUnit(newValue: UnitEnum);
        get rows(): internal.IList<TableRow>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Table;
    }
    class TableCell extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsTable(): Table;
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        get isHeader(): boolean;
        set isHeader(newValue: boolean);
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        get leftColumnIndex(): number;
        set leftColumnIndex(newValue: number);
        get topRowIndex(): number;
        set topRowIndex(newValue: number);
        get width(): number;
        set width(newValue: number);
        get height(): number;
        set height(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * The new TableCell will be automatically stored in the 'cells' property
         * of the parent Table element passed as argument.
         */
        static createIn(container: Table): TableCell;
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableCell;
    }
    class TableColumn extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsTable(): Table;
        get width(): number;
        set width(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * The new TableColumn will be automatically stored in the 'columns' property
         * of the parent Table element passed as argument.
         */
        static createIn(container: Table): TableColumn;
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableColumn;
    }
    class TableRow extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsTable(): Table;
        /**
         * In version 8.0.0: deleted
         */
        get class(): string;
        set class(newValue: string);
        /**
         * In version 8.0.0: deleted
         */
        get style(): string;
        set style(newValue: string);
        /**
         * In version 8.0.0: introduced
         */
        get appearance(): Appearance;
        set appearance(newValue: Appearance);
        get conditionalVisibilitySettings(): ConditionalVisibilitySettings | null;
        set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * The new TableRow will be automatically stored in the 'rows' property
         * of the parent Table element passed as argument.
         */
        static createIn(container: Table): TableRow;
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableRow;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/template-grid relevant section in reference guide}
     */
    class TemplateGrid extends Grid {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get contents(): TemplateGridContents;
        set contents(newValue: TemplateGridContents);
        get numberOfRows(): number;
        set numberOfRows(newValue: number);
        get numberOfColumns(): number;
        set numberOfColumns(newValue: number);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplateGrid;
    }
    class TemplateGridContents extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsTemplateGrid(): TemplateGrid;
        /**
         * In version 7.15.0: deleted
         */
        get widget(): Widget | null;
        set widget(newValue: Widget | null);
        /**
         * In version 7.15.0: introduced
         */
        get widgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'contents' property
         * of the parent TemplateGrid element passed as argument.
         */
        static createIn(container: TemplateGrid): TemplateGridContents;
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplateGridContents;
    }
    /**
     * In version 8.13.0: introduced
     */
    class TemplatePlaceholder extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get type(): string;
        set type(newValue: string);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * The new TemplatePlaceholder will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.13.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TemplatePlaceholder;
        /**
         * Creates and returns a new TemplatePlaceholder instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplatePlaceholder;
    }
    abstract class TextWidget extends AttributeWidgetWithPlaceholder {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get maxLengthCode(): number;
        set maxLengthCode(newValue: number);
        /**
         * In version 9.15.0: introduced
         */
        get autoFocus(): boolean;
        set autoFocus(newValue: boolean);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/text-area relevant section in reference guide}
     */
    class TextArea extends TextWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get numberOfLines(): number;
        set numberOfLines(newValue: number);
        get counterMessage(): texts.Text;
        set counterMessage(newValue: texts.Text);
        get textTooLongMessage(): texts.Text;
        set textTooLongMessage(newValue: texts.Text);
        /**
         * In version 8.10.0: introduced
         */
        get autocomplete(): boolean;
        set autocomplete(newValue: boolean);
        /**
         * In version 9.14.0: introduced
         */
        get submitBehaviour(): SubmitBehaviourType;
        set submitBehaviour(newValue: SubmitBehaviourType);
        /**
         * In version 9.14.0: introduced
         */
        get submitOnInputDelay(): number;
        set submitOnInputDelay(newValue: number);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TextArea;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/text-box relevant section in reference guide}
     */
    class TextBox extends TextWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        get inputMask(): string;
        set inputMask(newValue: string);
        get formattingInfo(): FormattingInfo;
        set formattingInfo(newValue: FormattingInfo);
        get isPasswordBox(): boolean;
        set isPasswordBox(newValue: boolean);
        /**
         * In version 8.0.0: introduced
         */
        get keyboardType(): KeyboardType;
        set keyboardType(newValue: KeyboardType);
        /**
         * In version 8.7.0: introduced
         */
        get onEnterKeyPressAction(): ClientAction;
        set onEnterKeyPressAction(newValue: ClientAction);
        /**
         * In version 8.10.0: introduced
         */
        get autocomplete(): boolean;
        set autocomplete(newValue: boolean);
        /**
         * In version 8.12.0: introduced
         */
        get autocompletePurpose(): AutocompletePurposeType;
        set autocompletePurpose(newValue: AutocompletePurposeType);
        /**
         * In version 8.15.0: introduced
         */
        get submitBehaviour(): SubmitBehaviourType;
        set submitBehaviour(newValue: SubmitBehaviourType);
        /**
         * In version 8.15.0: introduced
         */
        get submitOnInputDelay(): number;
        set submitOnInputDelay(newValue: number);
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TextBox;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/page-title relevant section in reference guide}
     */
    class Title extends ConditionallyVisibleWidget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        get containerAsReportPane(): reports.ReportPane;
        /**
         * In version 9.24.0: introduced
         */
        get nativeAccessibilitySettings(): AccessibilitySettings | null;
        set nativeAccessibilitySettings(newValue: AccessibilitySettings | null);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Title;
    }
    /**
     * In version 10.2.0: introduced
     */
    class ToggleDesignPropertyValue extends AbstractDesignPropertyValue {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsDesignPropertyValue(): DesignPropertyValue;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ToggleDesignPropertyValue instance in the SDK and on the server.
         * The new ToggleDesignPropertyValue will be automatically stored in the 'value' property
         * of the parent DesignPropertyValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  10.2.0 and higher
         */
        static createIn(container: DesignPropertyValue): ToggleDesignPropertyValue;
        /**
         * Creates and returns a new ToggleDesignPropertyValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ToggleDesignPropertyValue;
    }
    /**
     * In version 10.1.0: deleted
     * In version 9.21.0: introduced
     */
    class UserRoleSet extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsRetrievalQuery(): RetrievalQuery;
        get containerAsRuntimeOperation(): RuntimeOperation;
        get userRoles(): internal.IList<security.IUserRole>;
        get userRolesQualifiedNames(): string[];
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new UserRoleSet instance in the SDK and on the server.
         * The new UserRoleSet will be automatically stored in the 'allowedUserRoleSets' property
         * of the parent RetrievalQuery element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.21.0 to 10.0.0
         */
        static createInRetrievalQueryUnderAllowedUserRoleSets(container: RetrievalQuery): UserRoleSet;
        /**
         * Creates and returns a new UserRoleSet instance in the SDK and on the server.
         * The new UserRoleSet will be automatically stored in the 'allowedUserRoleSets' property
         * of the parent RuntimeOperation element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.21.0 to 10.0.0
         */
        static createInRuntimeOperationUnderAllowedUserRoleSets(container: RuntimeOperation): UserRoleSet;
        /**
         * Creates and returns a new UserRoleSet instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): UserRoleSet;
    }
    /**
     * In version 9.0.2: introduced
     */
    interface IWorkflowTemplateType extends ITemplateType {
        readonly model: IModel;
        readonly containerAsPageTemplate: IPageTemplate;
        asLoaded(): WorkflowTemplateType;
        load(callback: (element: WorkflowTemplateType) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<WorkflowTemplateType>;
    }
    /**
     * In version 9.0.2: introduced
     */
    abstract class WorkflowTemplateType extends TemplateType implements IWorkflowTemplateType {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageTemplate(): PageTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
    }
    /**
     * In version 9.0.2: introduced
     */
    interface IUserTaskTemplateType extends IWorkflowTemplateType {
        readonly model: IModel;
        readonly containerAsPageTemplate: IPageTemplate;
        asLoaded(): UserTaskTemplateType;
        load(callback: (element: UserTaskTemplateType) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<UserTaskTemplateType>;
    }
    /**
     * In version 9.0.2: introduced
     */
    class UserTaskTemplateType extends WorkflowTemplateType implements IUserTaskTemplateType {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageTemplate(): PageTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new UserTaskTemplateType instance in the SDK and on the server.
         * The new UserTaskTemplateType will be automatically stored in the 'templateType' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createIn(container: PageTemplate): UserTaskTemplateType;
        /**
         * Creates and returns a new UserTaskTemplateType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): UserTaskTemplateType;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide/validation-message relevant section in reference guide}
     *
     * In version 7.0.2: introduced
     */
    class ValidationMessage extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsWidgetValue(): customwidgets.WidgetValue;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNativeLayoutContent(): NativeLayoutContent;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsWebLayoutContent(): WebLayoutContent;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.2.0 and higher
         */
        static createInWidgetValueUnderWidgets(container: customwidgets.WidgetValue): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderFooterWidgets(container: DataView): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDataViewUnderWidgets(container: DataView): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInDivContainerUnderWidgets(container: DivContainer): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderLeftWidgets(container: Header): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInHeaderUnderRightWidgets(container: Header): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewUnderWidgets(container: ListView): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'sidebarWidgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.5.0 and higher
         */
        static createInNativeLayoutContentUnderSidebarWidgets(container: NativeLayoutContent): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent NativeLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInNativeLayoutContentUnderWidgets(container: NativeLayoutContent): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInSnippetUnderWidgets(container: Snippet): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTabPageUnderWidgets(container: TabPage): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTableCellUnderWidgets(container: TableCell): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 and higher
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.2 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * The new ValidationMessage will be automatically stored in the 'widgets' property
         * of the parent WebLayoutContent element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createInWebLayoutContentUnderWidgets(container: WebLayoutContent): ValidationMessage;
        /**
         * Creates and returns a new ValidationMessage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ValidationMessage;
    }
    /**
     * In version 7.15.0: deleted
     */
    class VerticalFlow extends Widget {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        get widgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): VerticalFlow;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
     *
     * In version 8.0.0: deleted
     */
    class VerticalSplitPane extends SplitPane {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsNativeLayout(): nativepages.NativeLayout;
        get containerAsNativeLayoutCallArgument(): nativepages.NativeLayoutCallArgument;
        get containerAsBuildingBlock(): BuildingBlock;
        get containerAsDataView(): DataView;
        get containerAsDivContainer(): DivContainer;
        get containerAsGroupBox(): GroupBox;
        get containerAsHeader(): Header;
        get containerAsLayout(): Layout;
        get containerAsLayoutCallArgument(): LayoutCallArgument;
        get containerAsLayoutGridColumn(): LayoutGridColumn;
        get containerAsListView(): ListView;
        get containerAsListViewTemplate(): ListViewTemplate;
        get containerAsMasterDetailRegion(): MasterDetailRegion;
        get containerAsNavigationListItem(): NavigationListItem;
        get containerAsScrollContainerRegion(): ScrollContainerRegion;
        get containerAsSnippet(): Snippet;
        get containerAsSplitPane(): SplitPane;
        get containerAsTabPage(): TabPage;
        get containerAsTableCell(): TableCell;
        get containerAsTemplateGridContents(): TemplateGridContents;
        get containerAsVerticalFlow(): VerticalFlow;
        get containerAsReportPane(): reports.ReportPane;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'headerWidget' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.22.0 to 7.23.0
         */
        static createInNativeLayoutUnderHeaderWidget(container: nativepages.NativeLayout): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.21.0 to 7.23.0
         */
        static createInNativeLayoutUnderWidgets(container: nativepages.NativeLayout): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent nativepages.NativeLayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.23.0 to 7.23.0
         */
        static createInNativeLayoutCallArgumentUnderWidgets(container: nativepages.NativeLayoutCallArgument): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.7.0 to 7.14.0
         */
        static createInBuildingBlockUnderWidget(container: BuildingBlock): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent BuildingBlock element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInBuildingBlockUnderWidgets(container: BuildingBlock): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0 to 7.14.0
         */
        static createInDataViewUnderFooterWidget(container: DataView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'footerWidgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInDataViewUnderFooterWidgets(container: DataView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDataViewUnderWidget(container: DataView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInDataViewUnderWidgets(container: DataView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInDivContainerUnderWidget(container: DivContainer): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInDivContainerUnderWidgets(container: DivContainer): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInGroupBoxUnderWidget(container: GroupBox): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInGroupBoxUnderWidgets(container: GroupBox): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderLeftWidget(container: Header): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'leftWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInHeaderUnderLeftWidgets(container: Header): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInHeaderUnderRightWidget(container: Header): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'rightWidgets' property
         * of the parent Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInHeaderUnderRightWidgets(container: Header): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutUnderWidget(container: Layout): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutUnderWidgets(container: Layout): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutCallArgumentUnderWidgets(container: LayoutCallArgument): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInLayoutGridColumnUnderWidgets(container: LayoutGridColumn): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewUnderWidget(container: ListView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInListViewUnderWidgets(container: ListView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInListViewTemplateUnderWidgets(container: ListViewTemplate): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent MasterDetailRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.1.0 to 7.14.0
         */
        static createInMasterDetailRegionUnderWidget(container: MasterDetailRegion): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInNavigationListItemUnderWidgets(container: NavigationListItem): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInScrollContainerRegionUnderWidgets(container: ScrollContainerRegion): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSnippetUnderWidget(container: Snippet): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSnippetUnderWidgets(container: Snippet): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'firstWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderFirstWidgets(container: SplitPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'secondWidgets' property
         * of the parent SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInSplitPaneUnderSecondWidgets(container: SplitPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTabPageUnderWidget(container: TabPage): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInTabPageUnderWidgets(container: TabPage): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTableCellUnderWidget(container: TableCell): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInTableCellUnderWidgets(container: TableCell): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.15.0 to 7.23.0
         */
        static createInTemplateGridContentsUnderWidgets(container: TemplateGridContents): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 7.14.0
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0 to 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): VerticalSplitPane;
    }
    /**
     * In version 8.0.0: introduced
     */
    interface IWebLayoutContent extends ILayoutContent {
        readonly model: IModel;
        readonly containerAsLayout: ILayout;
        readonly layoutType: LayoutType;
        readonly layoutCall: ILayoutCall | null;
        asLoaded(): WebLayoutContent;
        load(callback: (element: WebLayoutContent) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<WebLayoutContent>;
    }
    /**
     * In version 8.0.0: introduced
     */
    class WebLayoutContent extends LayoutContent implements IWebLayoutContent {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsLayout(): Layout;
        get layoutType(): LayoutType;
        set layoutType(newValue: LayoutType);
        get layoutCall(): LayoutCall | null;
        set layoutCall(newValue: LayoutCall | null);
        get widgets(): internal.IList<Widget>;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WebLayoutContent instance in the SDK and on the server.
         * The new WebLayoutContent will be automatically stored in the 'content' property
         * of the parent Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  8.0.0 and higher
         */
        static createIn(container: Layout): WebLayoutContent;
        /**
         * Creates and returns a new WebLayoutContent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WebLayoutContent;
    }
    /**
     * In version 7.6.0: introduced
     */
    class WidgetValidation extends internal.Element<IModel> {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsAttributeWidget(): AttributeWidget;
        get containerAsReferenceSelector(): ReferenceSelector;
        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         */
        get expression(): string;
        set expression(newValue: string);
        /**
         * NOTE: This property is experimental and is subject to change in newer Model SDK versions.
         *
         * @ignore
         *
         * In version 9.8.0: deleted
         * In version 7.9.0: introduced
         */
        get expressionModel(): expressions.Expression;
        set expressionModel(newValue: expressions.Expression);
        get message(): texts.Text;
        set message(newValue: texts.Text);
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetValidation instance in the SDK and on the server.
         * The new WidgetValidation will be automatically stored in the 'validation' property
         * of the parent AttributeWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInAttributeWidgetUnderValidation(container: AttributeWidget): WidgetValidation;
        /**
         * Creates and returns a new WidgetValidation instance in the SDK and on the server.
         * The new WidgetValidation will be automatically stored in the 'validation' property
         * of the parent ReferenceSelector element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.6.0 and higher
         */
        static createInReferenceSelectorUnderValidation(container: ReferenceSelector): WidgetValidation;
        /**
         * Creates and returns a new WidgetValidation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetValidation;
    }
    /**
     * In version 9.0.2: introduced
     */
    interface IWorkflowOverviewTemplateType extends IWorkflowTemplateType {
        readonly model: IModel;
        readonly containerAsPageTemplate: IPageTemplate;
        asLoaded(): WorkflowOverviewTemplateType;
        load(callback: (element: WorkflowOverviewTemplateType) => void, forceRefresh?: boolean): void;
        load(forceRefresh?: boolean): Promise<WorkflowOverviewTemplateType>;
    }
    /**
     * In version 9.0.2: introduced
     */
    class WorkflowOverviewTemplateType extends WorkflowTemplateType implements IWorkflowOverviewTemplateType {
        static structureTypeName: string;
        static versionInfo: StructureVersionInfo;
        get containerAsPageTemplate(): PageTemplate;
        constructor(model: internal.AbstractModel, structureTypeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WorkflowOverviewTemplateType instance in the SDK and on the server.
         * The new WorkflowOverviewTemplateType will be automatically stored in the 'templateType' property
         * of the parent PageTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  9.0.2 and higher
         */
        static createIn(container: PageTemplate): WorkflowOverviewTemplateType;
        /**
         * Creates and returns a new WorkflowOverviewTemplateType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WorkflowOverviewTemplateType;
    }
}
import { customicons } from "./customicons";
import { customwidgets } from "./customwidgets";
import { datatypes } from "./datatypes";
import { documenttemplates } from "./documenttemplates";
import { domainmodels } from "./domainmodels";
import { enumerations } from "./enumerations";
import { expressions } from "./expressions";
import { images } from "./images";
import { menus } from "./menus";
import { microflows } from "./microflows";
import { nativepages } from "./nativepages";
import { navigation } from "./navigation";
import { reports } from "./reports";
import { security } from "./security";
import { texts } from "./texts";
import { workflows } from "./workflows";
import { IModel } from "./base-model";
